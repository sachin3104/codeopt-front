This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  blob-haikei.svg
  blob-scene-haikei.svg
  circle-scatter-haikei.svg
  layered-waves-haikei.svg
  placeholder.svg
  robots.txt
src/
  api/
    auth.ts
    client.ts
    service.ts
  components/
    convert/
      LanguageSelectionModal.tsx
      LanguageWarningBanner.tsx
    landing-page/
      ui/
        AuroraBackground.tsx
        CodeCompareSection.tsx
        GlowingEffect.tsx
        HoverEffect.tsx
      CodeCompareSection.tsx
      CodeOptimizationSection.tsx
      Footer.tsx
      GlowingEffectGrid.tsx
      Header.tsx
      WaitingListSection.tsx
    results/
      AnalysisView.tsx
      ConversionView.tsx
      DocumentationView.tsx
      OptimizationView.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      custom-progress.css
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      GlassButton.tsx
      hover-card.tsx
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
    ActionButtons.tsx
    AnalysisResultTabs.tsx
    beams-backgruond.tsx
    CodeAnalysisResults.tsx
    CodeEditor.tsx
    CodeInput.tsx
    CodeOptimizer.tsx
    DetailedChanges.tsx
    EmptyState.tsx
    FlowchartVisualization.tsx
    FunctionalityAnalysis.tsx
    Header.tsx
    MetricsCard.tsx
    MetricsDashboard.tsx
    OptimizationImprovementSummary.tsx
    OptimizationResultTabs.tsx
    PrivateRoute.tsx
    ResultsPanel.tsx
    ScoreCardDisplay.tsx
    ViewTabs.tsx
  context/
    AuthContext.tsx
  hooks/
    use-mobile.tsx
    use-toast.ts
  lib/
    utils.ts
  pages/
    AuthSuccessPage.tsx
    Index.tsx
    LandingPage.tsx
    LoginPage.tsx
    NotFound.tsx
    SignupPage.tsx
  types/
    api.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
components.json
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/blob-haikei.svg">
<svg id="visual" viewBox="0 0 960 540" width="960" height="540" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><rect x="0" y="0" width="960" height="540" fill="#170B3B"></rect><g transform="translate(464.10384288492537 264.2544708747404)"><path d="M94.6 -157.2C120.9 -148.7 139.2 -119.8 165.2 -90.3C191.1 -60.7 224.5 -30.3 236.5 6.9C248.5 44.2 239 88.3 204.4 102.9C169.9 117.6 110.3 102.6 72 116.2C33.8 129.8 16.9 171.9 -11.5 191.8C-39.8 211.7 -79.7 209.3 -118.6 196.2C-157.6 183 -195.7 159 -206.3 124.5C-216.9 90 -199.9 45 -189.7 5.9C-179.4 -33.2 -175.9 -66.3 -167.6 -104.7C-159.2 -143.1 -146.1 -186.7 -117.4 -193.8C-88.7 -200.9 -44.3 -171.5 -5.1 -162.6C34.2 -153.8 68.3 -165.7 94.6 -157.2" fill="#9388A2"></path></g></svg>
</file>

<file path="public/blob-scene-haikei.svg">
<svg id="visual" viewBox="0 0 960 540" width="960" height="540" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><rect x="0" y="0" width="960" height="540" fill="#9388A2"></rect><defs><linearGradient id="grad1_0" x1="43.8%" y1="0%" x2="100%" y2="100%"><stop offset="14.444444444444446%" stop-color="#9388a2" stop-opacity="1"></stop><stop offset="85.55555555555554%" stop-color="#9388a2" stop-opacity="1"></stop></linearGradient></defs><defs><linearGradient id="grad2_0" x1="0%" y1="0%" x2="56.3%" y2="100%"><stop offset="14.444444444444446%" stop-color="#9388a2" stop-opacity="1"></stop><stop offset="85.55555555555554%" stop-color="#9388a2" stop-opacity="1"></stop></linearGradient></defs><g transform="translate(960, 0)"><path d="M0 486C-66.5 482.9 -133.1 479.9 -186 449C-238.9 418.1 -278.2 359.4 -306.9 306.9C-335.5 254.4 -353.5 208.2 -381.6 158C-409.6 107.9 -447.8 54 -486 0L0 0Z" fill="#170B3B"></path></g><g transform="translate(0, 540)"><path d="M0 -486C58.8 -462.5 117.6 -439 171.1 -413C224.5 -386.9 272.5 -358.2 321.7 -321.7C371 -285.2 421.4 -240.9 449 -186C476.6 -131.1 481.3 -65.5 486 0L0 0Z" fill="#170B3B"></path></g></svg>
</file>

<file path="public/circle-scatter-haikei.svg">
<svg id="visual" viewBox="0 0 960 540" width="960" height="540" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><rect x="0" y="0" width="960" height="540" fill="#170B3B"></rect><g fill="#9388A2"><circle r="34" cx="609" cy="121"></circle><circle r="30" cx="212" cy="431"></circle><circle r="31" cx="792" cy="110"></circle><circle r="30" cx="715" cy="368"></circle><circle r="31" cx="499" cy="348"></circle><circle r="29" cx="280" cy="465"></circle><circle r="31" cx="16" cy="133"></circle></g></svg>
</file>

<file path="public/layered-waves-haikei.svg">
<svg id="visual" viewBox="0 0 960 540" width="960" height="540" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><rect x="0" y="0" width="960" height="540" fill="#170B3B"></rect><path d="M0 391L16 384.3C32 377.7 64 364.3 96 365C128 365.7 160 380.3 192 383.7C224 387 256 379 288 374.8C320 370.7 352 370.3 384 368C416 365.7 448 361.3 480 362.8C512 364.3 544 371.7 576 376.3C608 381 640 383 672 387.7C704 392.3 736 399.7 768 393.3C800 387 832 367 864 357.3C896 347.7 928 348.3 944 348.7L960 349L960 541L944 541C928 541 896 541 864 541C832 541 800 541 768 541C736 541 704 541 672 541C640 541 608 541 576 541C544 541 512 541 480 541C448 541 416 541 384 541C352 541 320 541 288 541C256 541 224 541 192 541C160 541 128 541 96 541C64 541 32 541 16 541L0 541Z" fill="#341948"></path><path d="M0 426L16 423.7C32 421.3 64 416.7 96 409.3C128 402 160 392 192 386.7C224 381.3 256 380.7 288 379.5C320 378.3 352 376.7 384 381.3C416 386 448 397 480 403.3C512 409.7 544 411.3 576 411.8C608 412.3 640 411.7 672 407.7C704 403.7 736 396.3 768 390C800 383.7 832 378.3 864 379.3C896 380.3 928 387.7 944 391.3L960 395L960 541L944 541C928 541 896 541 864 541C832 541 800 541 768 541C736 541 704 541 672 541C640 541 608 541 576 541C544 541 512 541 480 541C448 541 416 541 384 541C352 541 320 541 288 541C256 541 224 541 192 541C160 541 128 541 96 541C64 541 32 541 16 541L0 541Z" fill="#4b345e"></path><path d="M0 419L16 420.5C32 422 64 425 96 423C128 421 160 414 192 410.8C224 407.7 256 408.3 288 414.5C320 420.7 352 432.3 384 440.2C416 448 448 452 480 451.5C512 451 544 446 576 445.7C608 445.3 640 449.7 672 449.3C704 449 736 444 768 439.3C800 434.7 832 430.3 864 428C896 425.7 928 425.3 944 425.2L960 425L960 541L944 541C928 541 896 541 864 541C832 541 800 541 768 541C736 541 704 541 672 541C640 541 608 541 576 541C544 541 512 541 480 541C448 541 416 541 384 541C352 541 320 541 288 541C256 541 224 541 192 541C160 541 128 541 96 541C64 541 32 541 16 541L0 541Z" fill="#624f74"></path><path d="M0 442L16 448.2C32 454.3 64 466.7 96 467.3C128 468 160 457 192 453.5C224 450 256 454 288 460C320 466 352 474 384 472.3C416 470.7 448 459.3 480 455.5C512 451.7 544 455.3 576 454.8C608 454.3 640 449.7 672 450.8C704 452 736 459 768 459.5C800 460 832 454 864 452.5C896 451 928 454 944 455.5L960 457L960 541L944 541C928 541 896 541 864 541C832 541 800 541 768 541C736 541 704 541 672 541C640 541 608 541 576 541C544 541 512 541 480 541C448 541 416 541 384 541C352 541 320 541 288 541C256 541 224 541 192 541C160 541 128 541 96 541C64 541 32 541 16 541L0 541Z" fill="#7a6b8b"></path><path d="M0 502L16 498.8C32 495.7 64 489.3 96 487C128 484.7 160 486.3 192 489C224 491.7 256 495.3 288 497.3C320 499.3 352 499.7 384 499.2C416 498.7 448 497.3 480 494.3C512 491.3 544 486.7 576 488.7C608 490.7 640 499.3 672 501.2C704 503 736 498 768 496.7C800 495.3 832 497.7 864 498.5C896 499.3 928 498.7 944 498.3L960 498L960 541L944 541C928 541 896 541 864 541C832 541 800 541 768 541C736 541 704 541 672 541C640 541 608 541 576 541C544 541 512 541 480 541C448 541 416 541 384 541C352 541 320 541 288 541C256 541 224 541 192 541C160 541 128 541 96 541C64 541 32 541 16 541L0 541Z" fill="#9388a2"></path></svg>
</file>

<file path="src/api/auth.ts">
// src/api/auth.ts
import api from './client';

// Shape of the user object returned by /api/auth/user
export interface User {
  id: string; // public_id from backend
  username: string;
  email: string;
  auth_provider: string;
  first_name?: string;
  last_name?: string;
  profile_picture?: string;
  created_at?: string;
  last_login?: string;
}

/**
 * Register a new user with local authentication.
 * @param username
 * @param email
 * @param password
 */
export const signup = (
  username: string,
  email: string,
  password: string
) =>
  api.post<{ 
    status: string;
    message: string;
    user: User;
  }>('/api/auth/signup', {
    username,
    email,
    password,
  });

/**
 * Log in with username and password (local authentication).
 * Sets HttpOnly cookie on success.
 * @param username
 * @param password
 */
export const login = (username: string, password: string) =>
  api.post<{ 
    status: string;
    message: string;
    user: User;
  }>('/api/auth/login', { 
    username, 
    password 
  });

/**
 * Fetch the currently logged-in user (if any).
 * Relies on the HttpOnly cookie that was set by login() or OAuth.
 */
export const fetchCurrentUser = () => {
  return api.get<{
    status: string;
    user: User;
  }>('/api/auth/user');
};

/**
 * Log out (clears HttpOnly cookie on the server).
 */
export const logout = () => {
  return api.post<{ 
    status: string;
    message: string;
  }>('/api/auth/logout');
};

/**
 * Initiate Google OAuth authentication.
 * This will redirect the user to the backend Google OAuth endpoint,
 * which will then redirect to Google's authorization server.
 */
export const initiateGoogleAuth = () => {
  window.location.href = `${import.meta.env.VITE_API_URL}/api/auth/google`;
};

/**
 * Check if the current session is authenticated.
 * Useful for checking auth status without fetching full user data.
 */
export const checkAuthStatus = () => {
  return api.get<{
    status: string;
    authenticated: boolean;
  }>('/api/auth/check');
};
</file>

<file path="src/api/client.ts">
// src/api/client.ts
import axios from 'axios';

// Ensure you have a `.env` at your project root with:
// VITE_API_URL=http://localhost:5000

const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL as string,
  withCredentials: true, // Send/receive HttpOnly cookies
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor - can be used for adding auth headers if needed
api.interceptors.request.use(
  (config) => {
    // You can add any request modifications here if needed
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor - handle common response scenarios
api.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    // Handle common error scenarios
    if (error.response?.status === 401) {
      // Unauthorized - could redirect to login or handle globally
      console.warn('Unauthorized request:', error.response.data?.message);
    } else if (error.response?.status === 403) {
      // Forbidden
      console.warn('Forbidden request:', error.response.data?.message);
    } else if (error.response?.status >= 500) {
      // Server errors
      console.error('Server error:', error.response.data?.message);
    }
    
    return Promise.reject(error);
  }
);

export default api;
</file>

<file path="src/api/service.ts">
// File: src/api/services.ts
// Centralized API service with auth-protected endpoints and re-exported types

// Import types from shared definitions
import type { AnalysisResult, OptimizationResult, ScoreData } from '@/types/api';

// Re-export types for convenience
export type { AnalysisResult, OptimizationResult, ScoreData };

// Backend URL from Vite env
const BACKEND_URL = import.meta.env.VITE_API_URL as string;


const handleApiError = async (response: Response) => {
  if (response.status === 401) {
    // Handle authentication error
    console.error('Authentication required. Please log in.');
    throw new Error('Authentication required. Please log in.');
  }
  
  if (!response.ok) {
    let errorMessage = `API Error ${response.status}: ${response.statusText}`;
    try {
      const errorData = await response.json();
      errorMessage = errorData.message || errorMessage;
    } catch {
      // If response is not JSON, use default message
    }
    throw new Error(errorMessage);
  }
};


/**
 * Analyze code using the backend service
 */
export const analyzeCode = async (code: string): Promise<AnalysisResult> => {
  try {
    // First try the comprehensive analysis endpoint
    const analysisResponse = await fetch(`${BACKEND_URL}/api/analysis_result`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ code }),
    });

    await handleApiError(analysisResponse);
    const analysisData = await analysisResponse.json();
    
    // Get detailed analysis with issues from the separate analyze endpoint
    let categoriesWithIssues: any[] = [];
    try {
      const detailedResponse = await fetch(`${BACKEND_URL}/api/analyze`, {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ code }),
      });

      if (detailedResponse.ok) {
        const detailedData = await detailedResponse.json();
        console.log('Detailed analysis data:', detailedData);
        
        // Transform the detailed analysis data
        if (detailedData.analysis) {
          categoriesWithIssues = Object.entries(detailedData.analysis).map(([key, value]: [string, any]) => ({
            name: value.name || key,
            hasIssues: Array.isArray(value.issues) && value.issues.length > 0,
            issues: value.issues || []
          }));
        }
      }
    } catch (error) {
      console.warn('Failed to get detailed analysis:', error);
    }

    // Debug logging
    console.log('Analysis response:', analysisData);
    console.log('Categories with issues:', categoriesWithIssues);

    return {
      categories: categoriesWithIssues,
      detectedLanguage: {
        name: analysisData.language || 'unknown',
        confidence: 1.0,
        color: analysisData.language === 'r' ? '#1984c8' : '#ccc',
      },
      workflow: {
        steps: analysisData.flowchart?.steps || [],
        dependencies: analysisData.flowchart?.dependencies || [],
        optimizable_steps: analysisData.flowchart?.optimizable_steps || [],
      },
      scores: {
        overall: analysisData.scores?.overall_score || 0,
        categories: {
          maintainability: {
            score: analysisData.scores?.scores?.maintainability?.score || 0,
            explanation: analysisData.scores?.scores?.maintainability?.explanation || 'No data available',
          },
          performance: {
            score: analysisData.scores?.scores?.performance_efficiency?.score || 0,
            explanation: analysisData.scores?.scores?.performance_efficiency?.explanation || 'No data available',
          },
          readability: {
            score: analysisData.scores?.scores?.readability?.score || 0,
            explanation: analysisData.scores?.scores?.readability?.explanation || 'No data available',
          },
          security: {
            score: analysisData.scores?.scores?.security_vulnerability?.score || 0,
            explanation: analysisData.scores?.scores?.security_vulnerability?.explanation || 'No data available',
          },
          testCoverage: {
            score: analysisData.scores?.scores?.test_coverage?.score || 0,
            explanation: analysisData.scores?.scores?.test_coverage?.explanation || 'No data available',
          },
        },
      },
      functionalityAnalysis: analysisData.functionality_analysis || null,
    };
  } catch (error) {
    console.error('Analysis API Error:', error);
    throw error;
  }
};


/**
 * Optimize code using the backend service
 */
export const optimizeCode = async (code: string): Promise<OptimizationResult> => {
  const response = await fetch(`${BACKEND_URL}/api/optimize`, {
    method: 'POST',
    credentials: 'include',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ code }),
  });

  if (!response.ok) {
    throw new Error(`Failed to optimize code: ${response.status} ${response.statusText}`);
  }

  const data = await response.json();
  return {
    optimizedCode: data.optimized_code,
    metrics: {
      executionTime: {
        value: data.improvement_percentages.execution_time,
        label: '% faster',
        improvement: data.improvement_percentages.execution_time > 0,
      },
      memoryUsage: {
        value: data.improvement_percentages.memory_usage,
        label: '% reduction',
        improvement: data.improvement_percentages.memory_usage > 0,
      },
      codeComplexity: {
        value: data.improvement_percentages.code_complexity,
        label: '% simpler',
        improvement: data.improvement_percentages.code_complexity > 0,
      },
    },
    changedLines: data.changed_lines ?? [],
    optimized_code_flowchart: data.optimized_code_flowchart,
    detailed_changes: data.detailed_changes ?? [],
    improvement_summary: data.improvement_summary ?? '',
    improvement_percentages: data.improvement_percentages,
  };
};

/**
 * Generate documentation for code
 */
export const documentCode = async (
  code: string
): Promise<{ original_code: string; documented_code: string }> => {
  const response = await fetch(`${BACKEND_URL}/api/document`, {
    method: 'POST',
    credentials: 'include',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ code }),
  });
  if (!response.ok) {
    const err = await response.json();
    throw new Error(err.message || `Failed to generate documentation: ${response.status}`);
  }
  return response.json();
};

/**
 * Convert code between languages
 */
export const convertCode = async (
  code: string,
  sourceLanguage: string,
  targetLanguage: string
): Promise<{ original_code: string; converted_code: string; source_language: string; target_language: string; conversion_notes: string }> => {
  const response = await fetch(`${BACKEND_URL}/api/convert`, {
    method: 'POST',
    credentials: 'include',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ code, source_language: sourceLanguage, target_language: targetLanguage }),
  });

  if (!response.ok) {
    const err = await response.json();
    throw new Error(err.message || `Failed to convert code: ${response.status}`);
  }

  return response.json();
};
</file>

<file path="src/components/convert/LanguageSelectionModal.tsx">
import React from 'react';
import { X, ArrowRight, FileCode, Code2, Database, BarChart3 } from 'lucide-react';

interface LanguageSelectionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConvert: (targetLanguage: 'python' | 'r' | 'sas') => void;
  sourceLanguage: 'python' | 'r' | 'sas';
  isConverting: boolean;
  selectedLanguage: 'python' | 'r' | 'sas' | null;
  onLanguageSelect: (language: 'python' | 'r' | 'sas') => void;
}

const LanguageSelectionModal: React.FC<LanguageSelectionModalProps> = ({
  isOpen,
  onClose,
  onConvert,
  sourceLanguage,
  isConverting,
  selectedLanguage,
  onLanguageSelect
}) => {
  const languages = [
    { 
      id: 'python' as const, 
      name: 'Python', 
      icon: Code2, 
      gradient: 'from-blue-500 to-blue-600',
      iconColor: 'text-blue-400'
    },
    { 
      id: 'r' as const, 
      name: 'R', 
      icon: BarChart3, 
      gradient: 'from-green-500 to-green-600',
      iconColor: 'text-green-400'
    },
    { 
      id: 'sas' as const, 
      name: 'SAS', 
      icon: Database, 
      gradient: 'from-purple-500 to-purple-600',
      iconColor: 'text-purple-400'
    }
  ];

  // Filter out the source language from target options
  const availableLanguages = languages.filter(lang => lang.id !== sourceLanguage);

  const handleConvert = () => {
    if (selectedLanguage && selectedLanguage !== sourceLanguage) {
      onConvert(selectedLanguage);
    }
  };

  // Early return if modal is not open
  if (!isOpen) return null;

  return (
    <>
      <style>{`
        .glass-modal-overlay {
          backdrop-filter: blur(8px);
          background: rgba(0, 0, 0, 0.6);
        }
        
        .glass-modal-container {
          backdrop-filter: blur(20px);
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.1) 0%, 
            rgba(255, 255, 255, 0.05) 100%);
          border: 1px solid rgba(255, 255, 255, 0.2);
          box-shadow: 
            0 25px 45px rgba(0, 0, 0, 0.4),
            inset 0 1px 0 rgba(255, 255, 255, 0.2);
        }
        
        .glass-modal-close-btn {
          backdrop-filter: blur(10px);
          background: rgba(255, 255, 255, 0.1);
          border: 1px solid rgba(255, 255, 255, 0.2);
          transition: all 0.3s ease;
        }
        
        .glass-modal-close-btn:hover {
          background: rgba(255, 255, 255, 0.2);
          transform: translateY(-1px);
        }
        
        .glass-language-card {
          backdrop-filter: blur(10px);
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.1) 0%, 
            rgba(255, 255, 255, 0.05) 100%);
          border: 1px solid rgba(255, 255, 255, 0.2);
          transition: all 0.3s ease;
        }
        
        .glass-language-card:hover {
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.15) 0%, 
            rgba(255, 255, 255, 0.08) 100%);
          border-color: rgba(255, 255, 255, 0.3);
          transform: translateY(-2px);
          box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }
        
        .glass-language-card.selected {
          background: linear-gradient(135deg, 
            rgba(59, 130, 246, 0.2) 0%, 
            rgba(37, 99, 235, 0.1) 100%);
          border-color: rgba(59, 130, 246, 0.6);
          box-shadow: 
            0 0 20px rgba(59, 130, 246, 0.3),
            0 8px 25px rgba(0, 0, 0, 0.3);
        }
        
        .glass-icon-container {
          backdrop-filter: blur(8px);
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.15) 0%, 
            rgba(255, 255, 255, 0.05) 100%);
          border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .glass-source-display {
          backdrop-filter: blur(10px);
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.08) 0%, 
            rgba(255, 255, 255, 0.03) 100%);
          border: 1px solid rgba(255, 255, 255, 0.15);
        }
        
        .glass-button {
          backdrop-filter: blur(10px);
          transition: all 0.3s ease;
        }
        
        .glass-button-cancel {
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.1) 0%, 
            rgba(255, 255, 255, 0.05) 100%);
          border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .glass-button-cancel:hover {
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.15) 0%, 
            rgba(255, 255, 255, 0.08) 100%);
          transform: translateY(-1px);
        }
        
        .glass-button-convert {
          background: linear-gradient(135deg, 
            rgba(59, 130, 246, 0.8) 0%, 
            rgba(37, 99, 235, 0.9) 100%);
          border: 1px solid rgba(59, 130, 246, 0.5);
          box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
        }
        
        .glass-button-convert:hover:not(:disabled) {
          background: linear-gradient(135deg, 
            rgba(59, 130, 246, 0.9) 0%, 
            rgba(37, 99, 235, 1) 100%);
          transform: translateY(-1px);
          box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
        }
        
        .glass-button-convert:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
        
        .glass-selection-indicator {
          background: linear-gradient(135deg, 
            rgba(59, 130, 246, 1) 0%, 
            rgba(37, 99, 235, 1) 100%);
          box-shadow: 0 0 10px rgba(59, 130, 246, 0.6);
        }
      `}</style>

      <div className="fixed inset-0 glass-modal-overlay flex items-center justify-center z-50">
        <div className="glass-modal-container rounded-2xl p-8 w-full max-w-md mx-4 relative">
          {/* Close button */}
          <button
            onClick={onClose}
            className="absolute top-4 right-4 glass-modal-close-btn rounded-full p-2"
            disabled={isConverting}
            aria-label="Close modal"
          >
            <X className="w-5 h-5 text-white" />
          </button>

          {/* Modal content */}
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-3 flex items-center gap-3 text-white">
              <div className="glass-icon-container rounded-xl p-2">
                <FileCode className="w-6 h-6 text-blue-400" />
              </div>
              Convert Code
            </h2>
            <p className="text-gray-300 text-sm leading-relaxed">
              Transform your code into a different programming language while maintaining functionality and structure.
            </p>
          </div>

          {/* Source language display */}
          <div className="mb-6 glass-source-display rounded-xl p-4">
            <div className="text-sm text-gray-400 mb-2 font-medium">From:</div>
            <div className="font-semibold text-white text-lg">
              {sourceLanguage === 'r' ? 'R' : sourceLanguage.charAt(0).toUpperCase() + sourceLanguage.slice(1)}
            </div>
          </div>

          {/* Arrow */}
          <div className="flex justify-center mb-6">
            <div className="glass-icon-container rounded-full p-3">
              <ArrowRight className="w-6 h-6 text-gray-300" />
            </div>
          </div>

          {/* Target language selection */}
          <div className="mb-8">
            <div className="text-sm text-gray-400 mb-4 font-medium">To:</div>
            <div className="space-y-3">
              {availableLanguages.length > 0 ? (
                availableLanguages.map((lang) => {
                  const IconComponent = lang.icon;
                  return (
                    <button
                      key={lang.id}
                      onClick={() => onLanguageSelect(lang.id)}
                      disabled={isConverting}
                      className={`w-full p-4 rounded-xl glass-language-card flex items-center gap-4 ${
                        selectedLanguage === lang.id ? 'selected' : ''
                      } ${isConverting ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
                    >
                      <div className="glass-icon-container w-12 h-12 rounded-xl flex items-center justify-center">
                        <IconComponent className={`w-6 h-6 ${lang.iconColor}`} />
                      </div>
                      <span className="font-semibold text-white text-lg flex-1 text-left">{lang.name}</span>
                      {selectedLanguage === lang.id && (
                        <div className="glass-selection-indicator w-3 h-3 rounded-full"></div>
                      )}
                    </button>
                  );
                })
              ) : (
                <div className="text-center text-gray-400 py-8 glass-source-display rounded-xl">
                  <Database className="w-8 h-8 mx-auto mb-2 opacity-50" />
                  <p>No other languages available for conversion</p>
                </div>
              )}
            </div>
          </div>

          {/* Action buttons */}
          <div className="flex gap-4">
            <button
              onClick={onClose}
              disabled={isConverting}
              className="flex-1 px-6 py-3 glass-button glass-button-cancel rounded-xl font-semibold text-white"
            >
              Cancel
            </button>
            <button
              onClick={handleConvert}
              disabled={!selectedLanguage || isConverting}
              className="flex-1 px-6 py-3 glass-button glass-button-convert rounded-xl font-semibold text-white flex items-center justify-center gap-2"
            >
              {isConverting ? (
                <>
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Converting...
                </>
              ) : (
                <>
                  <Code2 className="w-5 h-5" />
                  Convert
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </>
  );
};

export default LanguageSelectionModal;
</file>

<file path="src/components/convert/LanguageWarningBanner.tsx">
// LanguageWarningBanner.tsx
import React from 'react';
import { AlertTriangle, X } from 'lucide-react';

interface LanguageWarningBannerProps {
  isVisible: boolean;
  onDismiss: () => void;
  detectedLanguage?: string;
}

const LanguageWarningBanner: React.FC<LanguageWarningBannerProps> = ({
  isVisible,
  onDismiss,
  detectedLanguage
}) => {
  if (!isVisible) return null;

  return (
    <div className="bg-yellow-900/50 border border-yellow-600 rounded-lg p-3 mb-4">
      <div className="flex items-start gap-3">
        <AlertTriangle className="w-5 h-5 text-yellow-400 mt-0.5 flex-shrink-0" />
        <div className="flex-1">
          <h4 className="text-yellow-200 font-medium text-sm mb-1">
            Unsupported Language Detected
          </h4>
          <p className="text-yellow-100 text-sm">
            {detectedLanguage 
              ? `Detected language: ${detectedLanguage}. `
              : ''
            }
            Code conversion only supports <strong>Python</strong>, <strong>R</strong>, and <strong>SAS</strong> as input languages. 
            Please ensure your code is written in one of these languages to use the conversion feature.
          </p>
        </div>
        <button
          onClick={onDismiss}
          className="text-yellow-400 hover:text-yellow-300 flex-shrink-0"
        >
          <X className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
};

export default LanguageWarningBanner;
</file>

<file path="src/components/landing-page/ui/AuroraBackground.tsx">
import React, { ReactNode } from "react";

// Utility function to concatenate class names (replaces Next.js cn utility)
const cn = (...classes: (string | undefined | null | false)[]): string => {
  return classes.filter(Boolean).join(' ');
};

interface AuroraBackgroundProps extends React.HTMLProps<HTMLDivElement> {
  children: ReactNode;
  showRadialGradient?: boolean;
}

export const AuroraBackground = ({
  className,
  children,
  showRadialGradient = true,
  ...props
}: AuroraBackgroundProps) => {
  return (
    <main>
      <div
        className={cn(
          "transition-bg relative flex h-[100vh] flex-col items-center justify-center bg-zinc-50 text-slate-950 dark:bg-zinc-900",
          className,
        )}
        {...props}
      >
        <div
          className="absolute inset-0 overflow-hidden"
          style={
            {
              "--aurora":
                "repeating-linear-gradient(100deg,#3b82f6_10%,#a5b4fc_15%,#93c5fd_20%,#ddd6fe_25%,#60a5fa_30%)",
              "--dark-gradient":
                "repeating-linear-gradient(100deg,#000_0%,#000_7%,transparent_10%,transparent_12%,#000_16%)",
              "--white-gradient":
                "repeating-linear-gradient(100deg,#fff_0%,#fff_7%,transparent_10%,transparent_12%,#fff_16%)",
              "--blue-300": "#170B3B",
              "--blue-400": "#60a5fa",
              "--blue-500": "#341948",
              "--indigo-300": "#a5b4fc",
              "--violet-200": "#ddd6fe",
              "--black": "#000",
              "--white": "#9388A2",
              "--transparent": "transparent",
            } as React.CSSProperties
          }
        >
          <div
            // I'm sorry but this is what peak developer performance looks like // trigger warning
            className={cn(
              `after:animate-aurora pointer-events-none absolute -inset-[10px] [background-image:var(--white-gradient),var(--aurora)] [background-size:300%,_200%] [background-position:50%_50%,50%_50%] opacity-50 blur-[10px] invert filter will-change-transform [--aurora:repeating-linear-gradient(100deg,var(--blue-500)_10%,var(--indigo-300)_15%,var(--blue-300)_20%,var(--violet-200)_25%,var(--blue-400)_30%)] [--dark-gradient:repeating-linear-gradient(100deg,var(--black)_0%,var(--black)_7%,var(--transparent)_10%,var(--transparent)_12%,var(--black)_16%)] [--white-gradient:repeating-linear-gradient(100deg,var(--white)_0%,var(--white)_7%,var(--transparent)_10%,var(--transparent)_12%,var(--white)_16%)] after:absolute after:inset-0 after:[background-image:var(--white-gradient),var(--aurora)] after:[background-size:200%,_100%] after:[background-attachment:fixed] after:mix-blend-difference after:content-[""] dark:[background-image:var(--dark-gradient),var(--aurora)] dark:invert-0 after:dark:[background-image:var(--dark-gradient),var(--aurora)]`,
              showRadialGradient &&
                `[mask-image:radial-gradient(ellipse_at_100%_0%,black_10%,var(--transparent)_70%)]`,
            )}
          ></div>
        </div>
        {children}
      </div>
    </main>
  );
};
</file>

<file path="src/components/landing-page/ui/CodeCompareSection.tsx">
import React, { useState, useRef, useEffect, useCallback } from "react";
import { AnimatePresence, motion } from "motion/react";
import clsx from "clsx";

// You'll need to install @tabler/icons-react: npm install @tabler/icons-react
import { IconDotsVertical } from "@tabler/icons-react";

// Longer code examples for comparison
const beforeCode = `# Original implementation (unoptimized)

import pandas as pd
from datetime import datetime, timedelta

def process_data(df):
    # Initialize results list
    results = []
    # Loop through each row
    for index in range(len(df)):
        row = df.iloc[index]
        if row['value'] > 100:
            item = {'id': row['id'], 'value': row['value'] * 2}
            results.append(item)
    # Return list of dicts
    return results

# Usage example
records = process_data(dataframe)
print(len(records), "items processed")
`;

const afterCode = `# AgenticAI optimized implementation

import pandas as pd
from datetime import datetime, timedelta

def process_data(df):
    # Filter and apply transformation in one step
    return (
        df[df['value'] > 100]
        .apply(lambda row: {'id': row['id'], 'value': row['value'] * 2}, axis=1)
        .tolist()
    )

# Usage example
records = process_data(dataframe)
print(f"Processed {len(records)} items efficiently")
`;

interface CompareProps {
  firstCode: string;
  secondCode: string;
  className?: string;
  codeClass?: string;
  initialPct?: number;
}

export function Compare({
  firstCode,
  secondCode,
  className = "",
  codeClass = "",
  initialPct = 50,
}: CompareProps) {
  const [pct, setPct] = useState(initialPct);
  const [dragging, setDragging] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  const move = useCallback((x: number) => {
    if (!ref.current) return;
    const { left, width } = ref.current.getBoundingClientRect();
    let newPct = ((x - left) / width) * 100;
    newPct = Math.max(0, Math.min(100, newPct));
    setPct(newPct);
  }, []);

  useEffect(() => {
    const onMouseMove = (e: MouseEvent) => dragging && move(e.clientX);
    const onMouseUp = () => setDragging(false);
    window.addEventListener('mousemove', onMouseMove);
    window.addEventListener('mouseup', onMouseUp);
    return () => {
      window.removeEventListener('mousemove', onMouseMove);
      window.removeEventListener('mouseup', onMouseUp);
    };
  }, [dragging, move]);

  return (
    <div
      ref={ref}
      className={clsx("relative w-full h-full select-none overflow-hidden", className)}
      onMouseDown={(e) => { setDragging(true); move(e.clientX); }}
      onMouseMove={(e) => !dragging && move(e.clientX)}
    >
      {/* Slider handle */}
      <AnimatePresence>
        <motion.div
          className="absolute top-0 h-full w-[2px] bg-gradient-to-b from-transparent via-indigo-400 to-transparent z-30 transition-left"
          style={{ left: `${pct}%`, transition: 'left 0.2s ease-out' }}
          transition={{ duration: 0 }}
        >
          <div className="absolute inset-y-0 left-0 w-20 [mask-image:radial-gradient(100px_at_left,white,transparent)] bg-indigo-400 opacity-20" />
          <div className="absolute top-1/2 -translate-y-1/2 -right-2.5 w-6 h-6 bg-white rounded-md flex items-center justify-center shadow-md">
            <IconDotsVertical className="h-4 w-4 text-black" />
          </div>
        </motion.div>
      </AnimatePresence>

      {/* First code (clipped) */}
      <div className="absolute inset-0 z-20 pointer-events-none">
        <div
          className={codeClass}
          style={{ clipPath: `inset(0 ${100 - pct}% 0 0)`, transition: 'clip-path 0.2s ease-out' }}
        >
          <pre className="h-full overflow-auto p-6 font-mono text-sm text-white leading-relaxed bg-transparent">
            <code>{firstCode}</code>
          </pre>
        </div>
      </div>

      {/* Second code */}
      <div className="absolute inset-0 z-10">
        <pre className={clsx("h-full overflow-auto p-6 font-mono text-sm text-white leading-relaxed", codeClass)}>
          <code>{secondCode}</code>
        </pre>
      </div>
    </div>
  );
}

// Main section
export default function CodeCompareSection() {
  return (
    <section className="py-20 bg-[#1A1A1D]">
      <div className="max-w-6xl mx-auto px-4">
        <h2 className="text-3xl font-bold text-white text-center mb-8">
          Before & After: Code Comparison
        </h2>
        <div className="h-[70vh] bg-[rgba(255,255,255,0.05)] backdrop-blur-[16px] border border-[rgba(255,255,255,0.12)] rounded-3xl overflow-hidden relative">
          <Compare
            firstCode={beforeCode}
            secondCode={afterCode}
            initialPct={50}
            className="w-full h-full"
            codeClass="rounded-none"
          />
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/landing-page/ui/GlowingEffect.tsx">
import { memo, useCallback, useEffect, useRef } from "react";
import clsx from "clsx";
import { animate } from "motion/react";

interface GlowingEffectProps {
  blur?: number;
  inactiveZone?: number;
  proximity?: number;
  spread?: number;
  variant?: "default" | "white";
  glow?: boolean;
  className?: string;
  disabled?: boolean;
  movementDuration?: number;
  borderWidth?: number;
}

const GlowingEffect = memo(
  ({
    blur = 0,
    inactiveZone = 0.7,
    proximity = 0,
    spread = 20,
    variant = "default",
    glow = false,
    className,
    movementDuration = 2,
    borderWidth = 1,
    disabled = true,
  }: GlowingEffectProps) => {
    const containerRef = useRef<HTMLDivElement>(null);
    const lastPosition = useRef({ x: 0, y: 0 });
    const animationFrameRef = useRef<number>(0);

    const handleMove = useCallback(
      (e?: MouseEvent | { x: number; y: number }) => {
        if (!containerRef.current) return;

        if (animationFrameRef.current) {
          cancelAnimationFrame(animationFrameRef.current);
        }

        animationFrameRef.current = requestAnimationFrame(() => {
          const element = containerRef.current;
          if (!element) return;

          const { left, top, width, height } = element.getBoundingClientRect();
          const mouseX = e?.x ?? lastPosition.current.x;
          const mouseY = e?.y ?? lastPosition.current.y;

          if (e) {
            lastPosition.current = { x: mouseX, y: mouseY };
          }

          const center = [left + width * 0.5, top + height * 0.5];
          const distanceFromCenter = Math.hypot(
            mouseX - center[0],
            mouseY - center[1]
          );
          const inactiveRadius = 0.5 * Math.min(width, height) * inactiveZone;

          if (distanceFromCenter < inactiveRadius) {
            element.style.setProperty("--active", "0");
            return;
          }

          const isActive =
            mouseX > left - proximity &&
            mouseX < left + width + proximity &&
            mouseY > top - proximity &&
            mouseY < top + height + proximity;

          element.style.setProperty("--active", isActive ? "1" : "0");

          if (!isActive) return;

          const currentAngle =
            parseFloat(element.style.getPropertyValue("--start")) || 0;
          let targetAngle =
            (180 * Math.atan2(mouseY - center[1], mouseX - center[0])) /
              Math.PI +
            90;

          const angleDiff = ((targetAngle - currentAngle + 180) % 360) - 180;
          const newAngle = currentAngle + angleDiff;

          animate(currentAngle, newAngle, {
            duration: movementDuration,
            ease: [0.16, 1, 0.3, 1],
            onUpdate: (value) => {
              element.style.setProperty("--start", String(value));
            },
          });
        });
      },
      [inactiveZone, proximity, movementDuration]
    );

    useEffect(() => {
      if (disabled) return;

      const handleScroll = () => handleMove();
      const handlePointerMove = (e: PointerEvent) => handleMove(e);

      window.addEventListener("scroll", handleScroll, { passive: true });
      document.body.addEventListener("pointermove", handlePointerMove, {
        passive: true,
      });

      return () => {
        if (animationFrameRef.current) {
          cancelAnimationFrame(animationFrameRef.current);
        }
        window.removeEventListener("scroll", handleScroll);
        document.body.removeEventListener("pointermove", handlePointerMove);
      };
    }, [handleMove, disabled]);

    return (
      <>
        <div
          className={clsx(
            "pointer-events-none absolute -inset-px hidden rounded-[inherit] border opacity-0 transition-opacity",
            glow && "opacity-100",
            variant === "white" && "border-white",
            disabled && "!block",
            className
          )}
        />
        <div
          ref={containerRef}
          style={
            {
              "--blur": `${blur}px`,
              "--spread": spread,
              "--start": "0",
              "--active": "0",
              "--glowingeffect-border-width": `${borderWidth}px`,
              "--repeating-conic-gradient-times": "5",
              "--gradient":
                variant === "white"
                  ? `repeating-conic-gradient(
                  from 236.84deg at 50% 50%,
                  var(--black),
                  var(--black) calc(25% / var(--repeating-conic-gradient-times))
                )`
                  : `radial-gradient(circle, #dd7bbb 10%, #dd7bbb00 20%),
                radial-gradient(circle at 40% 40%, #d79f1e 5%, #d79f1e00 15%),
                radial-gradient(circle at 60% 60%, #5a922c 10%, #5a922c00 20%), 
                radial-gradient(circle at 40% 60%, #4c7894 10%, #4c789400 20%),
                repeating-conic-gradient(
                  from 236.84deg at 50% 50%,
                  #dd7bbb 0%,
                  #d79f1e calc(25% / var(--repeating-conic-gradient-times)),
                  #5a922c calc(50% / var(--repeating-conic-gradient-times)), 
                  #4c7894 calc(75% / var(--repeating-conic-gradient-times)),
                  #dd7bbb calc(100% / var(--repeating-conic-gradient-times))
                )`,
            } as React.CSSProperties
          }
          className={clsx(
            "pointer-events-none absolute inset-0 rounded-[inherit] opacity-100 transition-opacity",
            glow && "opacity-100",
            blur > 0 && "blur-[var(--blur)]",
            disabled && "!hidden",
            className
          )}
        >
          <div
            className={clsx(
              "glow",
              "rounded-[inherit]",
              'after:content-[""] after:rounded-[inherit] after:absolute after:inset-[calc(-1*var(--glowingeffect-border-width))]',
              "after:[border:var(--glowingeffect-border-width)_solid_transparent]",
              "after:[background:var(--gradient)] after:[background-attachment:fixed]",
              "after:opacity-[var(--active)] after:transition-opacity after:duration-300",
              "after:[mask-clip:padding-box,border-box]",
              "after:[mask-composite:intersect]",
              "after:[mask-image:linear-gradient(#0000,#0000),conic-gradient(from_calc((var(--start)-var(--spread))*1deg),#00000000_0deg,#fff,#00000000_calc(var(--spread)*2deg))]"
            )}
          />
        </div>
      </>
    );
  }
);

GlowingEffect.displayName = "GlowingEffect";

export { GlowingEffect };
</file>

<file path="src/components/landing-page/ui/HoverEffect.tsx">
import clsx from "clsx";
import { AnimatePresence, motion } from "motion/react";
import { useState } from "react";

export const HoverEffect = ({
  items,
  className,
}: {
  items: {
    title: string;
    description: string;
    link: string;
  }[];
  className?: string;
}) => {
  let [hoveredIndex, setHoveredIndex] = useState<number | null>(null);

  return (
    <div
      className={clsx(
        "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 py-10",
        className
      )}
    >
      {items.map((item, idx) => (
        <a
          href={item?.link}
          key={item?.link}
          className="relative group block p-2 h-full w-full"
          onMouseEnter={() => setHoveredIndex(idx)}
          onMouseLeave={() => setHoveredIndex(null)}
        >
          <AnimatePresence>
            {hoveredIndex === idx && (
              <motion.span
                className="absolute inset-0 h-full w-full bg-neutral-200 dark:bg-slate-800/[0.8] block rounded-3xl"
                layoutId="hoverBackground"
                initial={{ opacity: 0 }}
                animate={{
                  opacity: 1,
                  transition: { duration: 0.15 },
                }}
                exit={{
                  opacity: 0,
                  transition: { duration: 0.15, delay: 0.2 },
                }}
              />
            )}
          </AnimatePresence>
          <Card>
            <CardTitle>{item.title}</CardTitle>
            <CardDescription>{item.description}</CardDescription>
          </Card>
        </a>
      ))}
    </div>
  );
};

export const Card = ({
  className,
  children,
}: {
  className?: string;
  children: React.ReactNode;
}) => {
  return (
    <div
      className={clsx(
        "rounded-2xl h-full w-full p-4 overflow-hidden bg-black border border-transparent dark:border-white/[0.2] group-hover:border-slate-700 relative z-20",
        className
      )}
    >
      <div className="relative z-50">
        <div className="p-4">{children}</div>
      </div>
    </div>
  );
};

export const CardTitle = ({
  className,
  children,
}: {
  className?: string;
  children: React.ReactNode;
}) => {
  return (
    <h4 className={clsx("text-zinc-100 font-bold tracking-wide mt-4", className)}>
      {children}
    </h4>
  );
};

export const CardDescription = ({
  className,
  children,
}: {
  className?: string;
  children: React.ReactNode;
}) => {
  return (
    <p
      className={clsx(
        "mt-8 text-zinc-400 tracking-wide leading-relaxed text-sm",
        className
      )}
    >
      {children}
    </p>
  );
};
</file>

<file path="src/components/landing-page/CodeCompareSection.tsx">
import React, { useState, useRef, useEffect, useCallback } from "react";
import { AnimatePresence, motion } from "motion/react";
import clsx from "clsx";

// You'll need to install @tabler/icons-react: npm install @tabler/icons-react
import { IconDotsVertical } from "@tabler/icons-react";

// Longer code examples for comparison
const beforeCode = `# Original implementation (unoptimized)

import pandas as pd
from datetime import datetime, timedelta

def process_data(df):
    # Initialize results list
    results = []
    # Loop through each row
    for index in range(len(df)):
        row = df.iloc[index]
        if row['value'] > 100:
            item = {'id': row['id'], 'value': row['value'] * 2}
            results.append(item)
    # Return list of dicts
    return results

# Usage example
records = process_data(dataframe)
print(len(records), "items processed")
`;

const afterCode = `# AgenticAI optimized implementation

import pandas as pd
from datetime import datetime, timedelta

def process_data(df):
    # Filter and apply transformation in one step
    return (
        df[df['value'] > 100]
        .apply(lambda row: {'id': row['id'], 'value': row['value'] * 2}, axis=1)
        .tolist()
    )

# Usage example
records = process_data(dataframe)
print(f"Processed {len(records)} items efficiently")
`;

interface CompareProps {
  firstCode: string;
  secondCode: string;
  className?: string;
  codeClass?: string;
  initialPct?: number;
}

export function Compare({
  firstCode,
  secondCode,
  className = "",
  codeClass = "",
  initialPct = 50,
}: CompareProps) {
  const [pct, setPct] = useState(initialPct);
  const [dragging, setDragging] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  const move = useCallback((x: number) => {
    if (!ref.current) return;
    const { left, width } = ref.current.getBoundingClientRect();
    let newPct = ((x - left) / width) * 100;
    newPct = Math.max(0, Math.min(100, newPct));
    setPct(newPct);
  }, []);

  useEffect(() => {
    const onMouseMove = (e: MouseEvent) => dragging && move(e.clientX);
    const onMouseUp = () => setDragging(false);
    window.addEventListener('mousemove', onMouseMove);
    window.addEventListener('mouseup', onMouseUp);
    return () => {
      window.removeEventListener('mousemove', onMouseMove);
      window.removeEventListener('mouseup', onMouseUp);
    };
  }, [dragging, move]);

  return (
    <div
      ref={ref}
      className={clsx("relative w-full h-full select-none overflow-hidden", className)}
      onMouseDown={(e) => { setDragging(true); move(e.clientX); }}
      onMouseMove={(e) => move(e.clientX)} // Move slider whenever mouse moves over the component
    >
      {/* Slider handle */}
      <AnimatePresence>
        <motion.div
          className="absolute top-0 h-full w-[2px] bg-gradient-to-b from-transparent via-indigo-400 to-transparent z-30 transition-left"
          style={{ left: `${pct}%`, transition: 'left 0.2s ease-out' }}
          transition={{ duration: 0 }}
        >
          <div className="absolute inset-y-0 left-0 w-20 [mask-image:radial-gradient(100px_at_left,white,transparent)] bg-indigo-400 opacity-20" />
          <div className="absolute top-1/2 -translate-y-1/2 -right-2.5 w-6 h-6 bg-white rounded-md flex items-center justify-center shadow-md">
            <IconDotsVertical className="h-4 w-4 text-black" />
          </div>
        </motion.div>
      </AnimatePresence>

      {/* First code (clipped) - left side */}
      <div className="absolute inset-0 z-20 pointer-events-none">
        <div
          className={codeClass}
          style={{ clipPath: `inset(0 ${100 - pct}% 0 0)`, transition: 'clip-path 0.2s ease-out' }}
        >
          <pre className="h-full overflow-auto p-6 font-mono text-sm text-white leading-relaxed bg-transparent">
            <code>{firstCode}</code>
          </pre>
        </div>
      </div>

      {/* Second code (clipped) - right side */}
      <div className="absolute inset-0 z-10">
        <div
          className={codeClass}
          style={{ clipPath: `inset(0 0 0 ${pct}%)`, transition: 'clip-path 0.2s ease-out' }}
        >
          <pre className="h-full overflow-auto p-6 font-mono text-sm text-white leading-relaxed bg-transparent">
            <code>{secondCode}</code>
          </pre>
        </div>
      </div>
    </div>
  );
}

// Main section
export default function CodeCompareSection() {
  return (
    <section className="py-20">
      <div className="max-w-6xl mx-auto px-4">
        <h2 className="text-3xl font-bold text-white text-center mb-8">
          Before & After: Code Comparison
        </h2>
        <div className="h-[70vh] bg-[rgba(255,255,255,0.05)] backdrop-blur-[16px] border border-[rgba(255,255,255,0.12)] rounded-3xl overflow-hidden relative">
          <Compare
            firstCode={beforeCode}
            secondCode={afterCode}
            initialPct={50}
            className="w-full h-full"
            codeClass="rounded-none"
          />
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/landing-page/CodeOptimizationSection.tsx">
import React from "react";
import { ArrowRight } from "lucide-react";
import clsx from "clsx";

const optimizedCodeExample = `# Before optimization
def process_data(df):
 results = []
 for i in range(len(df)):
 if df.iloc[i]['value'] > 100:
 results.append({
 'id': df.iloc[i]['id'],
 'value': df.iloc[i]['value'] * 2
 })
 return results

# After AgenticAI optimization
def process_data(df):
 return df[df['value'] > 100].apply(
 lambda row: {'id': row['id'], 'value': row['value'] * 2},
 axis=1
 ).tolist()`;

export default function CodeOptimizationSection() {
  const benefits = [
    "Reduce execution time by up to 80%",
    "Decrease code complexity and improve readability",
    "Maintain logical equivalence with the original code",
  ];

  return (
    <section className="relative py-20">
      <div className="max-w-7xl mx-auto px-4">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
          {/* Left: "What we do" + text */}
          <div className="space-y-6">
            <h3 className="text-sm uppercase text-indigo-400 tracking-wide">
              What We Do
            </h3>
            <h2 className="text-4xl font-bold text-white">
              See the Power of Optimization
            </h2>
            <p className="text-lg text-gray-300">
              At Agentic AI, we harness state-of-the-art machine learning to
              automatically refactor your analytics code—boosting performance,
              clarity, and maintainability in one seamless step.
            </p>
            <ul className="space-y-4">
              {benefits.map((b) => (
                <li key={b} className="flex items-start space-x-3">
                  <ArrowRight className="mt-1 h-5 w-5 text-white" />
                  <span className="text-white">{b}</span>
                </li>
              ))}
            </ul>
            <button className="mt-4 inline-flex items-center px-6 py-3 bg-white/20 hover:bg-white/30 text-white rounded-full transition">
              Try Code Optimization
              <ArrowRight className="ml-2 h-4 w-4" />
            </button>
          </div>

          {/* Right: Glassmorphic code editor */}
          <div className="flex justify-center">
            <div className="w-full max-w-lg bg-[rgba(255,255,255,0.1)] backdrop-blur-[12px] border border-[rgba(255,255,255,0.18)] rounded-2xl p-6">
              {/* Window controls */}
              <div className="flex items-center space-x-2 mb-4">
                <span className="h-3 w-3 bg-red-500 rounded-full"></span>
                <span className="h-3 w-3 bg-yellow-500 rounded-full"></span>
                <span className="h-3 w-3 bg-green-500 rounded-full"></span>
              </div>
              <pre className="whitespace-pre-wrap font-mono text-sm text-white">
                <code>{optimizedCodeExample}</code>
              </pre>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/landing-page/Footer.tsx">
import React from "react";
import { Github, Linkedin, Twitter } from "lucide-react";
import clsx from "clsx";

export default function Footer() {
  return (
    <footer className="bg-gray-900 border-t border-gray-800">
      <div className="max-w-7xl mx-auto px-6 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Brand */}
          <div>
            <div className="flex items-center gap-2 mb-4">
              <span className="text-xl font-bold text-white">
                AgenticAI
              </span>
            </div>
            <p className="text-white/70 mb-4">
              Transforming analytics program management through intelligent automation
            </p>
            <div className="flex space-x-4">
              <a href="#" className="text-white/60 hover:text-white transition">
                <Twitter size={20} />
              </a>
              <a href="#" className="text-white/60 hover:text-white transition">
                <Github size={20} />
              </a>
              <a href="#" className="text-white/60 hover:text-white transition">
                <Linkedin size={20} />
              </a>
            </div>
          </div>

          {/* Product */}
          <div>
            <h3 className="text-sm font-semibold text-white mb-4">Product</h3>
            <ul className="space-y-3">
              <li>
                <a href="#features" className="text-white/70 hover:text-white transition">
                  Features
                </a>
              </li>
              <li>
                <a href="#" className="text-white/70 hover:text-white transition">
                  Pricing
                </a>
              </li>
              <li>
                <a href="#" className="text-white/70 hover:text-white transition">
                  Case Studies
                </a>
              </li>
              <li>
                <a href="#" className="text-white/70 hover:text-white transition">
                  Documentation
                </a>
              </li>
            </ul>
          </div>

          {/* Company */}
          <div>
            <h3 className="text-sm font-semibold text-white mb-4">Company</h3>
            <ul className="space-y-3">
              <li>
                <a href="#about" className="text-white/70 hover:text-white transition">
                  About
                </a>
              </li>
              <li>
                <a href="#" className="text-white/70 hover:text-white transition">
                  Careers
                </a>
              </li>
              <li>
                <a href="#" className="text-white/70 hover:text-white transition">
                  Blog
                </a>
              </li>
              <li>
                <a href="#contact" className="text-white/70 hover:text-white transition">
                  Contact
                </a>
              </li>
            </ul>
          </div>

          {/* Legal */}
          <div>
            <h3 className="text-sm font-semibold text-white mb-4">Legal</h3>
            <ul className="space-y-3">
              <li>
                <a href="#" className="text-white/70 hover:text-white transition">
                  Privacy Policy
                </a>
              </li>
              <li>
                <a href="#" className="text-white/70 hover:text-white transition">
                  Terms of Service
                </a>
              </li>
              <li>
                <a href="#" className="text-white/70 hover:text-white transition">
                  Cookie Policy
                </a>
              </li>
            </ul>
          </div>
        </div>

        <div className="mt-12 pt-8 border-t border-[rgba(255,255,255,0.12)]">
          <p className="text-center text-sm text-white/60">
            &copy; {new Date().getFullYear()} AgenticAI. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  );
}
</file>

<file path="src/components/landing-page/GlowingEffectGrid.tsx">
import {
    BarChart2,
    Code,
    FileCode,
    FileText,
  } from "lucide-react";
  import clsx from "clsx";
  import { GlowingEffect } from "./ui/GlowingEffect";
  
  const features = [
    {
      area: "md:[grid-area:1/1/2/7] xl:[grid-area:1/1/2/5]",
      title: "SmartAnalyzer",
      description:
        "Intelligent analysis that identifies inefficiencies and anomalies automatically.",
      icon: BarChart2,
      items: [
        "Comprehensive Code Diagnostics",
        "Interactive Visual Flowcharts",
        "Advanced Bug and Bottleneck Detection",
      ],
    },
    {
      area: "md:[grid-area:1/7/2/13] xl:[grid-area:2/1/3/5]",
      title: "OptiCode",
      description:
        "AI-powered code refactoring that enhances efficiency and readability.",
      icon: Code,
      items: [
        "AI-Powered Code Refactoring",
        "Real-Time Optimization Suggestions",
        "Adaptive Learning Algorithms",
      ],
    },
    {
      area: "md:[grid-area:2/1/3/7] xl:[grid-area:1/5/3/8]",
      title: "CodeTranslator",
      description:
        "Seamless translation between analytics languages such as SAS, Python, R, and more.",
      icon: FileCode,
      items: [
        "Effortless Multi-Language Conversion",
        "Accuracy and Fidelity Assurance",
        "Customization and Compliance",
      ],
    },
    {
      area: "md:[grid-area:2/7/3/13] xl:[grid-area:1/8/2/13]",
      title: "DocuGen",
      description:
        "Automatically creates professional-grade documentation for your analytics processes.",
      icon: FileText,
      items: [
        "Automated Documentation Generation",
        "Real-Time Updates",
        "Customizable Templates",
      ],
    },
  ];
  
  export function GlowingEffectGrid() {
    return (
      <ul className="grid grid-cols-1 gap-4 md:grid-cols-12 md:grid-rows-3 lg:gap-4 xl:max-h-[34rem] xl:grid-rows-2">
        {features.map(({ area, icon: Icon, title, description, items }) => (
          <GridItem
            key={title}
            area={area}
            icon={<Icon className="h-4 w-4 text-black dark:text-neutral-400" />}
            title={title}
            description={description}
            items={items}
          />
        ))}
      </ul>
    );
  }
  
  interface GridItemProps {
    area: string;
    icon: React.ReactNode;
    title: string;
    description: string;
    items: string[];
  }
  
  const GridItem = ({
    area,
    icon,
    title,
    description,
    items,
  }: GridItemProps) => {
    return (
      <li className={clsx("min-h-[14rem] list-none", area)}>
        <div className="relative h-full rounded-2xl border p-2 md:rounded-3xl md:p-3">
          <GlowingEffect
            spread={40}
            glow={true}
            disabled={false}
            proximity={64}
            inactiveZone={0.01}
          />
          <div className="border-0.75 relative flex h-full flex-col justify-between gap-6 overflow-hidden rounded-xl p-6 md:p-6 dark:shadow-[0px_0px_27px_0px_#2D2D2D]">
            <div className="relative flex flex-1 flex-col justify-between gap-3">
              {/* <div className="w-fit rounded-lg border border-gray-600 p-2">
                {icon}
              </div> */}
              <div className="space-y-3">
                <h3 className="-tracking-4 pt-0.5 font-sans text-xl/[1.375rem] font-semibold text-balance text-black md:text-2xl/[1.875rem] dark:text-white">
                  {title}
                </h3>
                <p className="font-sans text-sm/[1.125rem] text-black md:text-base/[1.375rem] dark:text-neutral-400">
                  {description}
                </p>
                <ul className="mt-2 list-disc list-inside space-y-1 text-sm text-black dark:text-neutral-400">
                  {items.map((item) => (
                    <li key={item}>{item}</li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </li>
    );
  };
</file>

<file path="src/components/landing-page/Header.tsx">
import React, { useState } from "react";
import { Menu, X } from "lucide-react";
import clsx from "clsx";

export default function Header() {
  const [menuOpen, setMenuOpen] = useState(false);

  return (
    <header
      className={clsx(
        "fixed",
        "top-2 sm:top-4",
        "inset-x-2 sm:inset-x-8",
        "z-50",
        "flex flex-col justify-center sm:flex-row sm:items-center sm:justify-between",
        "p-4",
        "bg-[rgba(0,0,0,0.1)]",
        "backdrop-blur-[3.5px]",
        "shadow-none",
        "rounded-2xl",
        "border border-[rgba(255,255,255,0.18)]"
      )}
    >
      <div className="flex items-center justify-between w-full sm:w-auto">
        <div className="text-white text-xl font-bold">
          agenticAI
        </div>
        <button
          className="sm:hidden text-white text-2xl focus:outline-none"
          onClick={() => setMenuOpen(prev => !prev)}
          aria-label="Toggle menu"
        >
          {menuOpen ? <X /> : <Menu />}
        </button>
      </div>

      <nav
        className={clsx(
          menuOpen ? 'mt-4' : 'mt-0',
          "sm:mt-0",
          "w-full sm:w-auto",
          "overflow-hidden",
          "transition-[max-height,opacity] duration-700 ease-in-out",
          menuOpen ? 'max-h-60 opacity-100' : 'max-h-0 opacity-0',
          "sm:max-h-none sm:opacity-100"
        )}
      >
        <ul
          className={clsx(
            "flex flex-col sm:flex-row",
            "items-center",
            "space-y-2 sm:space-y-0 sm:space-x-8",
            "text-white",
            "text-center",
            "bg-[rgba(0,0,0,0.2)] sm:bg-transparent",
            "p-4 sm:p-0",
            "rounded-lg sm:rounded-none",
            "transition-transform duration-700",
            menuOpen ? 'translate-y-0' : '-translate-y-2',
            "sm:translate-y-0"
          )}
        >
          <li>
            <a href="#features" className="hover:text-gray-200 transition-colors">
              Features
            </a>
          </li>
          <li>
            <a href="#benefits" className="hover:text-gray-200 transition-colors">
              Benefits
            </a>
          </li>
          <li>
            <a href="#about" className="hover:text-gray-200 transition-colors">
              About
            </a>
          </li>
          <li>
            <a href="#contact" className="hover:text-gray-200 transition-colors">
              Contact
            </a>
          </li>
        </ul>
      </nav>

      <button
        className={clsx(
          menuOpen ? 'mt-4' : 'mt-0',
          "sm:mt-0",
          "px-4 py-2",
          "bg-white/20 hover:bg-white/30",
          "rounded-md text-white",
          "self-center sm:self-auto",
          "overflow-hidden",
          "transition-[max-height,opacity] duration-700 ease-in-out",
          menuOpen ? 'max-h-12 opacity-100' : 'max-h-0 opacity-0',
          "sm:max-h-none sm:opacity-100"
        )}
      >
        Get Started
      </button>
    </header>
  );
}
</file>

<file path="src/components/landing-page/WaitingListSection.tsx">
import React, { useState } from "react";
import clsx from "clsx";

export default function WaitingListSection() {
  const [email, setEmail] = useState("");

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // TODO: send `email` to your API or service
    console.log("Joined waiting list:", email);
    setEmail("");
  };

  return (
    <section className="py-16">
      <div className="max-w-md mx-auto px-4">
        <h2 className="text-2xl font-bold text-white mb-4 text-center">
          Join Our Waiting List
        </h2>
        <form
          onSubmit={handleSubmit}
          className={clsx(
            "flex flex-col sm:flex-row gap-4 glass-card p-6 rounded-2xl",
            "bg-[rgba(255,255,255,0.1)] backdrop-blur-[8px]",
            "border border-[rgba(255,255,255,0.18)]"
          )}
        >
          <label htmlFor="email" className="sr-only">
            Email address
          </label>
          <input
            id="email"
            type="email"
            required
            placeholder="you@example.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className={clsx(
              "flex-1 px-4 py-3 bg-transparent placeholder-gray-400",
              "border border-transparent focus:border-white rounded-md",
              "text-white outline-none"
            )}
          />
          <button
            type="submit"
            className={clsx(
              "px-6 py-3 bg-white/20 hover:bg-white/30 text-white",
              "rounded-md transition"
            )}
          >
            Notify Me
          </button>
        </form>
      </div>
    </section>
  );
}
</file>

<file path="src/components/results/AnalysisView.tsx">
import React from 'react';
import FlowchartVisualization from '../FlowchartVisualization';
import { AnalysisResult } from '@/api/service';

interface AnalysisViewProps {
  analysisResults: AnalysisResult;
}

const AnalysisView: React.FC<AnalysisViewProps> = ({
  analysisResults
}) => {
  return (
    <div className="h-full flex flex-col">
      <div className="bg-gray-800/30 p-3 sm:p-4 rounded-lg mb-3 sm:mb-4">
        <h3 className="text-base sm:text-lg font-medium mb-2">
          Overall Score: {analysisResults.scores.overall}
        </h3>
        <ul className="space-y-1 sm:space-y-2 overflow-auto max-h-24 sm:max-h-32 text-sm sm:text-base">
          {Object.entries(analysisResults.scores.categories).map(([key, cat]) => (
            <li key={key} className="flex flex-col sm:flex-row sm:items-start gap-1 sm:gap-2">
              <span className="font-medium min-w-0 sm:min-w-[120px]">
                {key.charAt(0).toUpperCase() + key.slice(1)}:
              </span>
              <div className="flex flex-col sm:flex-row gap-1 sm:gap-2">
                <span className="text-blue-400">{cat.score}</span>
                <span className="text-xs sm:text-sm text-gray-400">({cat.explanation})</span>
              </div>
            </li>
          ))}
        </ul>
      </div>
      <div className="flex-1 overflow-auto bg-gray-800/30 rounded-lg p-3 sm:p-4 min-h-0">
        <FlowchartVisualization workflow={analysisResults.workflow} />
      </div>
    </div>
  );
};

export default AnalysisView;
</file>

<file path="src/components/results/ConversionView.tsx">
import React from 'react';
import { toast } from "@/components/ui/sonner";
import CodeEditor from '../CodeEditor';

interface ConversionViewProps {
  convertResult: {
    original_code: string;
    converted_code: string;
    source_language: string;
    target_language: string;
    conversion_notes: string;
  };
  selectedLanguage: 'r' | 'python' | 'sas';
  sourceLanguage: 'r' | 'python' | 'sas';
  onLanguageChange: (lang: 'r' | 'python' | 'sas') => void;
}

const ConversionView: React.FC<ConversionViewProps> = ({
  convertResult,
  selectedLanguage,
  sourceLanguage,
  onLanguageChange
}) => {
  const handleCopyConverted = () => {
    navigator.clipboard.writeText(convertResult.converted_code);
    toast.success("Converted code copied to clipboard!");
  };

  return (
    <CodeEditor
      title="Converted Code"
      code={convertResult.converted_code}
      editable={false}
      onCopy={handleCopyConverted}
      onLanguageChange={onLanguageChange}
      className="h-full w-full"
      language={selectedLanguage}
      sourceLanguage={sourceLanguage}
    />
  );
};

export default ConversionView;
</file>

<file path="src/components/results/DocumentationView.tsx">
import React from 'react';
import { toast } from "@/components/ui/sonner";
import CodeEditor from '../CodeEditor';

interface DocumentationViewProps {
  documentResult: {
    original_code: string;
    documented_code: string;
  };
  selectedLanguage: 'r' | 'python' | 'sas';
  onLanguageChange: (lang: 'r' | 'python' | 'sas') => void;
}

const DocumentationView: React.FC<DocumentationViewProps> = ({
  documentResult,
  selectedLanguage,
  onLanguageChange
}) => {
  const handleCopyDocumentation = () => {
    navigator.clipboard.writeText(documentResult.documented_code);
    toast.success("Documentation copied to clipboard!");
  };

  return (
    <CodeEditor
      title="Documentation"
      code={documentResult.documented_code}
      editable={false}
      onCopy={handleCopyDocumentation}
      onLanguageChange={onLanguageChange}
      className="h-full w-full"
      language={selectedLanguage}
    />
  );
};

export default DocumentationView;
</file>

<file path="src/components/results/OptimizationView.tsx">
import React from 'react';
import { toast } from "@/components/ui/sonner";
import CodeEditor from '../CodeEditor';
import { OptimizationResult } from '@/api/service';

interface OptimizationViewProps {
  optimizationResults: OptimizationResult;
  selectedLanguage: 'r' | 'python' | 'sas';
  onLanguageChange: (lang: 'r' | 'python' | 'sas') => void;
}

const OptimizationView: React.FC<OptimizationViewProps> = ({
  optimizationResults,
  selectedLanguage,
  onLanguageChange
}) => {
  const handleCopyOptimized = () => {
    navigator.clipboard.writeText(optimizationResults.optimizedCode);
    toast.success('Optimized code copied to clipboard!');
  };

  return (
    <CodeEditor
      title="Optimized Code"
      code={optimizationResults.optimizedCode}
      editable={false}
      onCopy={handleCopyOptimized}
      onLanguageChange={onLanguageChange}
      className="h-full w-full"
      language={selectedLanguage}
    />
  );
};

export default OptimizationView;
</file>

<file path="src/components/ui/GlassButton.tsx">
import React, { useState, CSSProperties } from 'react';

interface GlassButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  disabled?: boolean;
  className?: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'primary' | 'secondary' | 'ghost';
  borderColor?: string; // Color for border on hover
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  fullWidth?: boolean;
}

const GlassButton: React.FC<GlassButtonProps> = ({
  children,
  onClick,
  disabled = false,
  className = '',
  size = 'md',
  variant = 'primary',
  borderColor = '#4ade80', // Default border color
  startIcon,
  endIcon,
  fullWidth = false,
}) => {
  const [isHovered, setIsHovered] = useState(false);

  // Size classes mapping
  const sizeStyles: Record<string, CSSProperties> = {
    sm: { padding: '0.25rem 0.75rem', fontSize: '0.875rem' },
    md: { padding: '0.5rem 1rem', fontSize: '1rem' },
    lg: { padding: '0.75rem 1.5rem', fontSize: '1.125rem' },
  };

  // Variant styles mapping
  const variantStyles: Record<string, CSSProperties> = {
    primary: { backgroundColor: 'rgba(15, 15, 30, 0.25)' },
    secondary: { backgroundColor: 'rgba(15, 15, 30, 0.15)' },
    ghost: { backgroundColor: 'rgba(15, 15, 30, 0.05)' },
  };

  // Container styles
  const containerStyle: CSSProperties = {
    position: 'relative',
    display: 'inline-block',
    borderRadius: '8px',
    width: fullWidth ? '100%' : 'auto',
  };

  // Button styles
  const buttonStyle: CSSProperties = {
    backdropFilter: 'blur(10px)',
    backgroundColor: variantStyles[variant].backgroundColor,
    border: `2px solid ${isHovered && !disabled ? borderColor : 'rgba(255, 255, 255, 0.1)'}`,
    borderRadius: '8px',
    color: 'rgba(255, 255, 255, 0.85)',
    cursor: disabled ? 'not-allowed' : 'pointer',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontWeight: 500,
    gap: '8px',
    transition: 'all 0.3s ease',
    position: 'relative',
    width: fullWidth ? '100%' : 'auto',
    opacity: disabled ? 0.5 : 1,
    ...sizeStyles[size],
    ...(isHovered && !disabled ? {
      boxShadow: '0 5px 15px rgba(0, 0, 0, 0.2)',
      transform: 'translateY(-1px)',
    } : {})
  };

  return (
    <div style={containerStyle} className={fullWidth ? 'w-full' : ''}>
      <button
        style={buttonStyle}
        className={className}
        onClick={onClick}
        disabled={disabled}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        type="button"
      >
        {startIcon && <span className="button-start-icon">{startIcon}</span>}
        {children}
        {endIcon && <span className="button-end-icon">{endIcon}</span>}
      </button>
    </div>
  );
};

export default GlassButton;
</file>

<file path="src/components/ActionButtons.tsx">
import React from 'react';
import { Search, Zap, Code, FileText } from "lucide-react";
import GlassButton from './ui/GlassButton';

interface ActionButtonsProps {
  onAnalyze: () => void;
  onOptimize: () => void;
  onConvert: () => void;
  onDocument: () => void;
  isAnalyzing: boolean;
  isOptimizing: boolean;
  isConverting: boolean;
  isDocumenting: boolean;
  code: string;
  sourceLanguage?: 'python' | 'r' | 'sas';
}

const ActionButtons: React.FC<ActionButtonsProps> = ({
  onAnalyze,
  onOptimize,
  onConvert,
  onDocument,
  isAnalyzing,
  isOptimizing,
  isConverting,
  isDocumenting,
  code,
  sourceLanguage
}) => {
  // Check if source language is supported for conversion
  const isSupportedForConversion = sourceLanguage && ['python', 'r', 'sas'].includes(sourceLanguage);

  return (
    <div className="mt-3 sm:mt-4 px-2 sm:px-0">
      {/* Mobile: 2x2 grid layout */}
      <div className="grid grid-cols-2 gap-2 sm:hidden">
        <GlassButton
          variant="secondary"
          onClick={onAnalyze}
          disabled={isAnalyzing || !code}
          borderColor="#9388A2"
          className="w-full min-h-12 text-sm"
        >
          {isAnalyzing
            ? (
              <span className="flex items-center justify-center">
                <div className="h-4 w-4 rounded-full border-2 border-t-transparent border-white animate-spin mr-2" />
                <span className="truncate">Analyzing</span>
              </span>
            )
            : (
              <span className="flex items-center justify-center">
                <Search className="h-4 w-4 mr-1" />
                <span className="truncate">Analyze</span>
              </span>
            )}
        </GlassButton>
        
        <GlassButton
          onClick={onOptimize}
          disabled={isOptimizing || !code}
          borderColor="#9388A2"
          className="w-full min-h-12 text-sm"
        >
          {isOptimizing
            ? (
              <span className="flex items-center justify-center">
                <div className="h-4 w-4 rounded-full border-2 border-t-transparent border-white animate-spin mr-2" />
                <span className="truncate">Optimizing</span>
              </span>
            )
            : (
              <span className="flex items-center justify-center">
                <Zap className="h-4 w-4 mr-1" />
                <span className="truncate">Optimize</span>
              </span>
            )}
        </GlassButton>

        {/* Convert Button with Tooltip Wrapper */}
        <div className="relative">
          <GlassButton
            onClick={onConvert}
            disabled={isConverting || !code || !isSupportedForConversion}
            borderColor="#9388A2"
            className={`w-full min-h-12 text-sm ${!isSupportedForConversion && code ? 'opacity-60' : ''}`}
          >
            {isConverting
              ? (
                <span className="flex items-center justify-center">
                  <div className="h-4 w-4 rounded-full border-2 border-t-transparent border-white animate-spin mr-2" />
                  <span className="truncate">Converting</span>
                </span>
              )
              : (
                <span className="flex items-center justify-center">
                  <Code className="h-4 w-4 mr-1" />
                  <span className="truncate">Convert</span>
                </span>
              )}
          </GlassButton>
          {/* Tooltip for mobile */}
          {!isSupportedForConversion && code && (
            <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity z-10 whitespace-nowrap">
              Only Python, R, and SAS are supported
            </div>
          )}
        </div>

        <GlassButton
          onClick={onDocument}
          disabled={isDocumenting || !code}
          borderColor="#9388A2"
          className="w-full min-h-12 text-sm"
        >
          {isDocumenting
            ? (
              <span className="flex items-center justify-center">
                <div className="h-4 w-4 rounded-full border-2 border-t-transparent border-white animate-spin mr-2" />
                <span className="truncate">Documenting</span>
              </span>
            )
            : (
              <span className="flex items-center justify-center">
                <FileText className="h-4 w-4 mr-1" />
                <span className="truncate">Document</span>
              </span>
            )}
        </GlassButton>
      </div>

      {/* Tablet and Desktop: horizontal layout */}
      <div className="hidden sm:flex justify-center gap-2 md:gap-3 lg:gap-4 flex-wrap">
        <GlassButton
          variant="secondary"
          onClick={onAnalyze}
          disabled={isAnalyzing || !code}
          borderColor="#9388A2"
          className="min-w-24 md:min-w-28"
        >
          {isAnalyzing
            ? (
              <span className="flex items-center">
                <div className="h-4 w-4 rounded-full border-2 border-t-transparent border-white animate-spin mr-2" />
                Analyzing
              </span>
            )
            : (
              <>
                <Search className="h-4 w-4 mr-1" />
                Analyze
              </>
            )}
        </GlassButton>
        
        <GlassButton
          onClick={onOptimize}
          disabled={isOptimizing || !code}
          borderColor="#9388A2"
          className="min-w-24 md:min-w-28"
        >
          {isOptimizing
            ? (
              <span className="flex items-center">
                <div className="h-4 w-4 rounded-full border-2 border-t-transparent border-white animate-spin mr-2" />
                Optimizing
              </span>
            )
            : (
              <>
                <Zap className="h-4 w-4 mr-1" />
                Optimize
              </>
            )}
        </GlassButton>

        {/* Convert Button with Tooltip Wrapper for Desktop */}
        <div className="relative group">
          <GlassButton
            onClick={onConvert}
            disabled={isConverting || !code || !isSupportedForConversion}
            borderColor="#9388A2"
            className={`min-w-24 md:min-w-28 ${!isSupportedForConversion && code ? 'opacity-60' : ''}`}
          >
            {isConverting
              ? (
                <span className="flex items-center">
                  <div className="h-4 w-4 rounded-full border-2 border-t-transparent border-white animate-spin mr-2" />
                  Converting
                </span>
              )
              : (
                <>
                  <Code className="h-4 w-4 mr-1" />
                  Convert
                </>
              )}
          </GlassButton>
          {/* Tooltip for desktop */}
          {!isSupportedForConversion && code && (
            <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded opacity-0 group-hover:opacity-100 transition-opacity z-10 whitespace-nowrap border border-gray-700">
              Only Python, R, and SAS are supported for conversion
              <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
            </div>
          )}
        </div>

        <GlassButton
          onClick={onDocument}
          disabled={isDocumenting || !code}
          borderColor="#9388A2"
          className="min-w-24 md:min-w-28"
        >
          {isDocumenting
            ? (
              <span className="flex items-center">
                <div className="h-4 w-4 rounded-full border-2 border-t-transparent border-white animate-spin mr-2" />
                Documenting
              </span>
            )
            : (
              <>
                <FileText className="h-4 w-4 mr-1" />
                Document
              </>
            )}
        </GlassButton>
      </div>
    </div>
  );
};

export default ActionButtons;
</file>

<file path="src/components/AnalysisResultTabs.tsx">
import React, { useState, useEffect } from 'react';
import { AlertTriangle, Info } from 'lucide-react';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import FunctionalityAnalysis from './FunctionalityAnalysis';
import { AnalysisResult } from '@/api/service';

interface AnalysisResultTabsProps {
  results: AnalysisResult;
}

const AnalysisResultTabs: React.FC<AnalysisResultTabsProps> = ({ results }) => {
  const [activeTab, setActiveTab] = useState<'opportunities' | 'functionality'>('opportunities');

  // Debug logging
  useEffect(() => {
    console.log('AnalysisResultTabs - Full results:', results);
    console.log('AnalysisResultTabs - Categories:', results.categories);
    console.log('AnalysisResultTabs - Categories with issues:', 
      results.categories?.filter(cat => cat.hasIssues) || []
    );
  }, [results]);

  // Safely get categories with fallback
  const categories = results.categories || [];
  const categoriesWithIssues = categories.filter(cat => cat.hasIssues);
  const totalIssues = categoriesWithIssues.reduce((total, cat) => total + (cat.issues?.length || 0), 0);

  return (
    <div className="border border-gray-800 rounded-2xl p-6">
      {/* Top Tabs */}
      <div className="flex border-b border-gray-700 mb-6">
        <button
          type="button"
          onClick={() => setActiveTab('opportunities')}
          className={`px-4 py-2 -mb-px focus:outline-none transition-colors ${
            activeTab === 'opportunities'
              ? 'border-b-2 border-indigo-400 text-white font-medium'
              : 'text-gray-400 hover:text-gray-200'
          }`}
        >
          Optimization Opportunities {totalIssues > 0 && `(${totalIssues})`}
        </button>
        <button
          type="button"
          onClick={() => setActiveTab('functionality')}
          className={`px-4 py-2 -mb-px focus:outline-none transition-colors ${
            activeTab === 'functionality'
              ? 'border-b-2 border-indigo-400 text-white font-medium'
              : 'text-gray-400 hover:text-gray-200'
          }`}
        >
          Functionality Analysis
        </button>
      </div>

      {/* Content */}
      {activeTab === 'opportunities' && (
        <div>
          {/* Debug Info - Remove this in production */}
          <div className="mb-4 p-3 bg-blue-900/20 border border-blue-700/30 rounded-lg text-sm">
            <div className="text-blue-300 font-medium mb-2">Debug Information:</div>
            <div className="text-blue-200 space-y-1">
              <div>Total categories: {categories.length}</div>
              <div>Categories with issues: {categoriesWithIssues.length}</div>
              <div>Total issues: {totalIssues}</div>
            </div>
          </div>

          {categories.length === 0 ? (
            <div className="text-center py-8">
              <Info className="mx-auto h-12 w-12 text-gray-400 mb-4" />
              <h3 className="text-lg font-medium text-white mb-2">No Analysis Data</h3>
              <p className="text-gray-400">No categories found in the analysis results.</p>
            </div>
          ) : categoriesWithIssues.length === 0 ? (
            <div className="text-center py-8">
              <div className="mx-auto h-12 w-12 bg-green-500/20 rounded-full flex items-center justify-center mb-4">
                <svg className="h-6 w-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <h3 className="text-lg font-medium text-white mb-2">Great Code Quality!</h3>
              <p className="text-gray-400">No optimization opportunities found. Your code looks good!</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {categories.map((category, idx) => (
                <Card
                  key={idx}
                  className={`bg-gray-800/20 backdrop-blur-sm border border-gray-700 rounded-2xl hover:shadow-lg transition-shadow ${
                    category.hasIssues ? 'border-amber-700/30 bg-amber-950/10' : ''
                  }`}
                >
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-sm font-medium flex items-center gap-2 text-white">
                        {category.hasIssues && (
                          <AlertTriangle size={16} className="text-amber-500" />
                        )}
                        {category.name}
                      </CardTitle>
                      {category.hasIssues && (
                        <span className="text-xs px-2 py-0.5 bg-amber-500/20 text-amber-400 rounded-full">
                          {category.issues?.length || 0} {(category.issues?.length || 0) === 1 ? 'issue' : 'issues'}
                        </span>
                      )}
                    </div>
                    <CardDescription className="text-xs text-gray-300">
                      {category.hasIssues
                        ? `${category.issues?.length || 0} optimization ${
                            (category.issues?.length || 0) === 1 ? 'opportunity' : 'opportunities'
                          } found`
                        : 'No optimization opportunities found'}
                    </CardDescription>
                  </CardHeader>

                  {category.hasIssues && category.issues && category.issues.length > 0 && (
                    <CardContent>
                      <Accordion type="single" collapsible className="w-full bg-transparent">
                        {category.issues.map((issue, i) => (
                          <AccordionItem key={i} value={`issue-${i}`}>
                            <AccordionTrigger className="text-sm text-white hover:text-gray-200">
                              {issue.title || `Issue ${i + 1}`}
                            </AccordionTrigger>
                            <AccordionContent>
                              <div className="space-y-3 text-sm text-gray-200">
                                {issue.location && (
                                  <div>
                                    <div className="font-medium text-xs text-muted-foreground mb-1">CODE LOCATION</div>
                                    <div className="bg-secondary/50 px-3 py-1 rounded-sm text-white">
                                      {issue.location}
                                    </div>
                                  </div>
                                )}
                                {issue.reason && (
                                  <div>
                                    <div className="font-medium text-xs text-muted-foreground mb-1">REASON</div>
                                    <p>{issue.reason}</p>
                                  </div>
                                )}
                                {issue.suggestion && (
                                  <div>
                                    <div className="font-medium text-xs text-muted-foreground mb-1">SUGGESTION</div>
                                    <p className="text-primary">{issue.suggestion}</p>
                                  </div>
                                )}
                              </div>
                            </AccordionContent>
                          </AccordionItem>
                        ))}
                      </Accordion>
                    </CardContent>
                  )}
                </Card>
              ))}
            </div>
          )}
        </div>
      )}

      {activeTab === 'functionality' && (
        <div className="border border-gray-700 rounded-2xl p-4">
          {results.functionalityAnalysis ? (
            <FunctionalityAnalysis content={results.functionalityAnalysis} />
          ) : (
            <div className="text-center py-8">
              <Info className="mx-auto h-12 w-12 text-gray-400 mb-4" />
              <h3 className="text-lg font-medium text-white mb-2">No Functionality Analysis</h3>
              <p className="text-gray-400">Functionality analysis data is not available.</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default AnalysisResultTabs;
</file>

<file path="src/components/beams-backgruond.tsx">
import type React from "react"

import { useEffect, useRef } from "react"
import { motion } from "motion/react"
import { cn } from "@/lib/utils"

interface AnimatedGradientBackgroundProps {
  className?: string
  children?: React.ReactNode
  intensity?: "subtle" | "medium" | "strong"
}

interface Beam {
  x: number
  y: number
  width: number
  length: number
  angle: number
  speed: number
  opacity: number
  hue: number
  pulse: number
  pulseSpeed: number
}

function createBeam(width: number, height: number): Beam {
  const angle = -35 + Math.random() * 10
  return {
    x: Math.random() * width * 1.5 - width * 0.25,
    y: Math.random() * height * 1.5 - height * 0.25,
    width: 30 + Math.random() * 60,
    length: height * 2.5,
    angle: angle,
    speed: 0.6 + Math.random() * 1.2,
    opacity: 0.12 + Math.random() * 0.16,
    hue: 190 + Math.random() * 70,
    pulse: Math.random() * Math.PI * 2,
    pulseSpeed: 0.02 + Math.random() * 0.03,
  }
}

export default function BeamsBackground({ className, intensity = "strong", children }: AnimatedGradientBackgroundProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const beamsRef = useRef<Beam[]>([])
  const animationFrameRef = useRef<number>(0)
  const MINIMUM_BEAMS = 20

  const opacityMap = {
    subtle: 0.7,
    medium: 0.85,
    strong: 1,
  }

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    const updateCanvasSize = () => {
      const dpr = window.devicePixelRatio || 1
      canvas.width = window.innerWidth * dpr
      canvas.height = window.innerHeight * dpr
      canvas.style.width = `${window.innerWidth}px`
      canvas.style.height = `${window.innerHeight}px`
      ctx.scale(dpr, dpr)

      const totalBeams = MINIMUM_BEAMS * 1.5
      beamsRef.current = Array.from({ length: totalBeams }, () => createBeam(canvas.width, canvas.height))
    }

    updateCanvasSize()
    window.addEventListener("resize", updateCanvasSize)

    function resetBeam(beam: Beam, index: number, totalBeams: number) {
      if (!canvas) return beam

      const column = index % 3
      const spacing = canvas.width / 3

      beam.y = canvas.height + 100
      beam.x = column * spacing + spacing / 2 + (Math.random() - 0.5) * spacing * 0.5
      beam.width = 100 + Math.random() * 100
      beam.speed = 0.5 + Math.random() * 0.4
      beam.hue = 190 + (index * 70) / totalBeams
      beam.opacity = 0.2 + Math.random() * 0.1
      return beam
    }

    function drawBeam(ctx: CanvasRenderingContext2D, beam: Beam) {
      ctx.save()
      ctx.translate(beam.x, beam.y)
      ctx.rotate((beam.angle * Math.PI) / 180)

      // Calculate pulsing opacity
      const pulsingOpacity = beam.opacity * (0.8 + Math.sin(beam.pulse) * 0.2) * opacityMap[intensity]

      const gradient = ctx.createLinearGradient(0, 0, 0, beam.length)

      // Enhanced gradient with multiple color stops
      gradient.addColorStop(0, `hsla(${beam.hue}, 85%, 65%, 0)`)
      gradient.addColorStop(0.1, `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity * 0.5})`)
      gradient.addColorStop(0.4, `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity})`)
      gradient.addColorStop(0.6, `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity})`)
      gradient.addColorStop(0.9, `hsla(${beam.hue}, 85%, 65%, ${pulsingOpacity * 0.5})`)
      gradient.addColorStop(1, `hsla(${beam.hue}, 85%, 65%, 0)`)

      ctx.fillStyle = gradient
      ctx.fillRect(-beam.width / 2, 0, beam.width, beam.length)
      ctx.restore()
    }

    function animate() {
      if (!canvas || !ctx) return

      ctx.clearRect(0, 0, canvas.width, canvas.height)
      ctx.filter = "blur(35px)"

      const totalBeams = beamsRef.current.length
      beamsRef.current.forEach((beam, index) => {
        beam.y -= beam.speed
        beam.pulse += beam.pulseSpeed

        // Reset beam when it goes off screen
        if (beam.y + beam.length < -100) {
          resetBeam(beam, index, totalBeams)
        }

        drawBeam(ctx, beam)
      })

      animationFrameRef.current = requestAnimationFrame(animate)
    }

    animate()

    return () => {
      window.removeEventListener("resize", updateCanvasSize)
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current)
      }
    }
  }, [intensity])

  return (
    <div className={cn("relative min-h-screen w-full overflow-hidden bg-neutral-950", className)}>
      <canvas ref={canvasRef} className="absolute inset-0" style={{ filter: "blur(15px)" }} />

      <motion.div
        className="absolute inset-0 bg-neutral-950/5"
        animate={{
          opacity: [0.05, 0.15, 0.05],
        }}
        transition={{
          duration: 10,
          ease: "easeInOut",
          repeat: Number.POSITIVE_INFINITY,
        }}
        style={{
          backdropFilter: "blur(50px)",
        }}
      />
      <div className="relative z-10">
        {children}
      </div>
    </div>
  )
}
</file>

<file path="src/components/CodeInput.tsx">
import React, { useEffect } from 'react';
import CodeEditor from './CodeEditor';
import ActionButtons from './ActionButtons';
import { AnalysisResult, OptimizationResult } from '@/api/service';

interface CodeInputProps {
  code: string;
  onCodeChange: (code: string) => void;
  onAnalyze: () => void;
  onOptimize: () => void;
  onConvert: () => void;
  onDocument: () => void;
  isAnalyzing: boolean;
  isOptimizing: boolean;
  isConverting: boolean;
  isDocumenting: boolean;
  analysisResults: AnalysisResult | null;
  optimizationResults: OptimizationResult | null;
  convertResult: {
    original_code: string;
    converted_code: string;
    source_language: string;
    target_language: string;
    conversion_notes: string;
  } | null;
  documentResult: {
    original_code: string;
    documented_code: string;
  } | null;
  selectedLanguage: 'r' | 'python' | 'sas';
  onLanguageChange: (lang: 'r' | 'python' | 'sas') => void;
  activeView: "analysis" | "optimization" | "convert" | "document" | null;
  setActiveView: (view: "analysis" | "optimization" | "convert" | "document") => void;
  sourceLanguage: 'r' | 'python' | 'sas';
  onSourceLanguageChange: (lang: 'r' | 'python' | 'sas') => void;
  onDetectedLanguageChange?: (lang: 'r' | 'python' | 'sas') => void;
  onResetResults: () => void;
}

const CodeInput: React.FC<CodeInputProps> = ({
  code,
  onCodeChange,
  onAnalyze,
  onOptimize,
  onConvert,
  onDocument,
  isAnalyzing,
  isOptimizing,
  isConverting,
  isDocumenting,
  analysisResults,
  optimizationResults,
  convertResult,
  documentResult,
  selectedLanguage,
  onLanguageChange,
  activeView,
  setActiveView,
  sourceLanguage,
  onSourceLanguageChange,
  onDetectedLanguageChange,
  onResetResults
}) => {
  useEffect(() => {
    // Only reset if we don't have any active results
    if (!analysisResults && !optimizationResults && !convertResult && !documentResult) {
      onResetResults();
    }
  }, [code, onResetResults, analysisResults, optimizationResults, convertResult, documentResult]);

  return (
    <div className="flex flex-col h-full">


      {/* Editor */}
      <div className="flex-1 min-h-0">
        <CodeEditor
          title=""
          code={code}
          editable
          onCodeChange={onCodeChange}
          className="h-full w-full"
          language={sourceLanguage}
          sourceLanguage={sourceLanguage}
          onLanguageChange={onSourceLanguageChange}
          onDetectedLanguageChange={onDetectedLanguageChange}
        />
      </div>
      
      {/* Action Buttons */}
      <ActionButtons
        onAnalyze={onAnalyze}
        onOptimize={onOptimize}
        onConvert={onConvert}
        onDocument={onDocument}
        isAnalyzing={isAnalyzing}
        isOptimizing={isOptimizing}
        isConverting={isConverting}
        isDocumenting={isDocumenting}
        code={code}
        sourceLanguage={sourceLanguage}
      />
    </div>
  );
};

export default CodeInput;
</file>

<file path="src/components/EmptyState.tsx">
import React from 'react';
import CodeInput from './CodeInput';
import { AnalysisResult, OptimizationResult } from '@/api/service';

interface EmptyStateProps {
  code: string;
  onCodeChange: (code: string) => void;
  onAnalyze: () => void;
  onOptimize: () => void;
  onConvert: () => void;
  onDocument: () => void;
  isAnalyzing: boolean;
  isOptimizing: boolean;
  isConverting: boolean;
  isDocumenting: boolean;
  analysisResults: AnalysisResult | null;
  optimizationResults: OptimizationResult | null;
  convertResult: {
    original_code: string;
    converted_code: string;
    source_language: string;
    target_language: string;
    conversion_notes: string;
  } | null;
  documentResult: {
    original_code: string;
    documented_code: string;
  } | null;
  selectedLanguage: 'r' | 'python' | 'sas';
  onLanguageChange: (lang: 'r' | 'python' | 'sas') => void;
  activeView: "analysis" | "optimization" | "convert" | "document" | null;
  setActiveView: (view: "analysis" | "optimization" | "convert" | "document") => void;
  sourceLanguage: 'r' | 'python' | 'sas';
  onSourceLanguageChange: (lang: 'r' | 'python' | 'sas') => void;
  onDetectedLanguageChange?: (lang: 'r' | 'python' | 'sas') => void;
  onResetResults: () => void;
}

const EmptyState: React.FC<EmptyStateProps> = ({
  code,
  onCodeChange,
  onAnalyze,
  onOptimize,
  onConvert,
  onDocument,
  isAnalyzing,
  isOptimizing,
  isConverting,
  isDocumenting,
  analysisResults,
  optimizationResults,
  convertResult,
  documentResult,
  selectedLanguage,
  onLanguageChange,
  activeView,
  setActiveView,
  sourceLanguage,
  onSourceLanguageChange,
  onDetectedLanguageChange,
  onResetResults
}) => {
  return (
    <div className="flex flex-col items-center justify-center p-4 sm:p-8 lg:p-16 min-h-screen">
      <div className="w-full max-w-xs sm:max-w-md lg:max-w-lg sm:h-[50vh] flex flex-col">
        <CodeInput
          code={code}
          onCodeChange={onCodeChange}
          onAnalyze={onAnalyze}
          onOptimize={onOptimize}
          onConvert={onConvert}
          onDocument={onDocument}
          isAnalyzing={isAnalyzing}
          isOptimizing={isOptimizing}
          isConverting={isConverting}
          isDocumenting={isDocumenting}
          analysisResults={analysisResults}
          optimizationResults={optimizationResults}
          convertResult={convertResult}
          documentResult={documentResult}
          selectedLanguage={selectedLanguage}
          onLanguageChange={onLanguageChange}
          activeView={activeView}
          setActiveView={setActiveView}
          sourceLanguage={sourceLanguage}
          onSourceLanguageChange={onSourceLanguageChange}
          onDetectedLanguageChange={onDetectedLanguageChange}
          onResetResults={onResetResults}
        />
      </div>
    </div>
  );
};

export default EmptyState;
</file>

<file path="src/components/OptimizationResultTabs.tsx">
import React, { useState } from 'react';
import FlowchartVisualization from './FlowchartVisualization';
import MetricsDashboard from './MetricsDashboard';
import DetailedChanges from './DetailedChanges';
import OptimizationImprovementSummary from './OptimizationImprovementSummary';
import { OptimizationResult } from '@/api/service';

interface OptimizationResultTabsProps {
  results: OptimizationResult;
}

const OptimizationResultTabs: React.FC<OptimizationResultTabsProps> = ({ results }) => {
  const [activeTab, setActiveTab] = useState<'flowchart' | 'stats' | 'report'>('flowchart');

  return (
    <div className="border border-gray-800 rounded-2xl p-3 sm:p-0 lg:p-6">
      {/* Top Tabs */}
      <div className="flex border-b border-gray-700 mb-3 sm:mb-4 lg:mb-6 overflow-x-auto scrollbar-hide">
        <div className="flex min-w-full sm:min-w-0 gap-1 sm:gap-0">
          <button
            type="button"
            onClick={() => setActiveTab('flowchart')}
            className={`px-3 sm:px-4 py-2 -mb-px focus:outline-none transition-colors whitespace-nowrap text-sm sm:text-base ${
              activeTab === 'flowchart'
                ? 'border-b-2 border-indigo-400 text-white font-medium'
                : 'text-gray-400 hover:text-gray-200'
            }`}
          >
            Flowchart
          </button>
          <button
            type="button"
            onClick={() => setActiveTab('stats')}
            className={`px-3 sm:px-4 py-2 -mb-px focus:outline-none transition-colors whitespace-nowrap text-sm sm:text-base ${
              activeTab === 'stats'
                ? 'border-b-2 border-indigo-400 text-white font-medium'
                : 'text-gray-400 hover:text-gray-200'
            }`}
          >
            Stats
          </button>
          <button
            type="button"
            onClick={() => setActiveTab('report')}
            className={`px-3 sm:px-4 py-2 -mb-px focus:outline-none transition-colors whitespace-nowrap text-sm sm:text-base ${
              activeTab === 'report'
                ? 'border-b-2 border-indigo-400 text-white font-medium'
                : 'text-gray-400 hover:text-gray-200'
            }`}
          >
            Report
          </button>
        </div>
      </div>

      {/* Content */}
      {activeTab === 'flowchart' && (
        <div className="bg-gray-800/20 backdrop-blur-sm border border-gray-700 rounded-xl sm:rounded-2xl p-3 sm:p-0">
          <FlowchartVisualization workflow={results.optimized_code_flowchart} />
        </div>
      )}

      {activeTab === 'stats' && results.metrics && (
        <div className="bg-gray-800/20 backdrop-blur-sm border border-gray-700 rounded-xl sm:rounded-2xl p-3 sm:p-0">
          <MetricsDashboard
            executionTime={{
              value:
                results.improvement_percentages?.execution_time ||
                results.metrics.executionTime.value,
              label: 'faster',
              improvement: true,
            }}
            memoryUsage={{
              value:
                results.improvement_percentages?.memory_usage ||
                results.metrics.memoryUsage.value,
              label: 'less memory',
              improvement: true,
            }}
            codeComplexity={{
              value:
                results.improvement_percentages?.code_complexity ||
                results.metrics.codeComplexity.value,
              label: 'complexity reduction',
              improvement: true,
            }}
          />
        </div>
      )}

      {activeTab === 'report' && (
        <div className="space-y-3 sm:space-y-4">
          {results.detailed_changes && (
            <div className="bg-gray-800/20 backdrop-blur-sm border border-gray-700 rounded-xl sm:rounded-2xl p-3 sm:p-0">
              <DetailedChanges changes={results.detailed_changes} />
            </div>
          )}
          {results.improvement_summary && (
            <div className="bg-gray-800/20 backdrop-blur-sm border border-gray-700 rounded-xl sm:rounded-2xl p-3 sm:p-0">
              <OptimizationImprovementSummary content={results.improvement_summary} />
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default OptimizationResultTabs;
</file>

<file path="src/components/PrivateRoute.tsx">
// File: src/components/PrivateRoute.tsx
// This component protects routes by redirecting unauthenticated users to /login

import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';

interface PrivateRouteProps {
  children: JSX.Element;
}

const PrivateRoute: React.FC<PrivateRouteProps> = ({ children }) => {
  const { user, loading } = useAuth();
  const location = useLocation();

  // While checking auth status, you can render a loader or null
  if (loading) {
    return <div>Loading...</div>;
  }

  // If not logged in, redirect to login, preserving the attempted path
  if (!user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Authorized: render the child component
  return children;
};

export default PrivateRoute;
</file>

<file path="src/components/ResultsPanel.tsx">
import React from 'react';
import { toast } from "@/components/ui/sonner";
import CodeEditor from './CodeEditor';
import FlowchartVisualization from './FlowchartVisualization';
import { AnalysisResult, OptimizationResult } from '@/api/service';

interface ResultsPanelProps {
  activeView: "analysis" | "optimization" | "convert" | "document" | null;
  analysisResults: AnalysisResult | null;
  optimizationResults: OptimizationResult | null;
  convertResult: {
    original_code: string;
    converted_code: string;
    source_language: string;
    target_language: string;
    conversion_notes: string;
  } | null;
  documentResult: {
    original_code: string;
    documented_code: string;
  } | null;
  selectedLanguage: 'r' | 'python' | 'sas';
  setSelectedLanguage: (lang: 'r' | 'python' | 'sas') => void;
  sourceLanguage: 'r' | 'python' | 'sas';
}

const ResultsPanel: React.FC<ResultsPanelProps> = ({
  activeView,
  analysisResults,
  optimizationResults,
  convertResult,
  documentResult,
  selectedLanguage,
  setSelectedLanguage,
  sourceLanguage
}) => {
  const handleCopyOptimized = () => {
    if (optimizationResults) {
      navigator.clipboard.writeText(optimizationResults.optimizedCode);
      toast.success('Optimized code copied to clipboard!');
    }
  };

  return (
    <div className="w-full lg:w-1/2 h-1/2 lg:h-full overflow-auto p-2 sm:p-4">
      {activeView === 'optimization' && optimizationResults && (
        <CodeEditor
          title="Optimized Code"
          code={optimizationResults.optimizedCode}
          editable={false}
          onCopy={handleCopyOptimized}
          onLanguageChange={setSelectedLanguage}
          className="h-full w-full"
          language={selectedLanguage}
        />
      )}

      {activeView === 'analysis' && analysisResults && (
        <div className="h-full flex flex-col">
          <div className="bg-gray-800/30 p-3 sm:p-4 rounded-lg mb-3 sm:mb-4">
            <h3 className="text-base sm:text-lg font-medium mb-2">Overall Score: {analysisResults.scores.overall}</h3>
            <ul className="space-y-1 sm:space-y-2 overflow-auto max-h-24 sm:max-h-32 text-sm sm:text-base">
              {Object.entries(analysisResults.scores.categories).map(([key, cat]) => (
                <li key={key} className="flex flex-col sm:flex-row sm:items-start gap-1 sm:gap-2">
                  <span className="font-medium min-w-0 sm:min-w-[120px]">{key.charAt(0).toUpperCase() + key.slice(1)}:</span>
                  <div className="flex flex-col sm:flex-row gap-1 sm:gap-2">
                    <span className="text-blue-400">{cat.score}</span>
                    <span className="text-xs sm:text-sm text-gray-400">({cat.explanation})</span>
                  </div>
                </li>
              ))}
            </ul>
          </div>
          <div className="flex-1 overflow-auto bg-gray-800/30 rounded-lg p-3 sm:p-4 min-h-0">
            <FlowchartVisualization workflow={analysisResults.workflow} />
          </div>
        </div>
      )}

      {activeView === 'convert' && convertResult && (
        <CodeEditor
          title="Converted Code"
          code={convertResult.converted_code}
          editable={false}
          onCopy={() => {
            navigator.clipboard.writeText(convertResult.converted_code);
            toast.success("Converted code copied to clipboard!");
          }}
          onLanguageChange={setSelectedLanguage}
          className="h-full w-full"
          language={selectedLanguage}
          sourceLanguage={sourceLanguage}
        />
      )}

      {activeView === 'document' && documentResult && (
        <CodeEditor
          title="Documentation"
          code={documentResult.documented_code}
          editable={false}
          onCopy={() => {
            navigator.clipboard.writeText(documentResult.documented_code);
            toast.success("Documentation copied to clipboard!");
          }}
          onLanguageChange={setSelectedLanguage}
          className="h-full w-full"
          language={selectedLanguage}
        />
      )}
    </div>
  );
};

export default ResultsPanel;
</file>

<file path="src/components/ViewTabs.tsx">
import React from 'react';
import { AnalysisResult, OptimizationResult } from '@/api/service';

interface ViewTabsProps {
  activeView: "analysis" | "optimization" | "convert" | "document" | null;
  setActiveView: (view: "analysis" | "optimization" | "convert" | "document") => void;
  analysisResults: AnalysisResult | null;
  optimizationResults: OptimizationResult | null;
  convertResult: {
    original_code: string;
    converted_code: string;
    source_language: string;
    target_language: string;
    conversion_notes: string;
  } | null;
  documentResult: {
    original_code: string;
    documented_code: string;
  } | null;
}

const ViewTabs: React.FC<ViewTabsProps> = ({
  activeView,
  setActiveView,
  analysisResults,
  optimizationResults,
  convertResult,
  documentResult
}) => {
  return (
    <div className="sticky top-0 z-10 border-b border-gray-800 bg-gray-900/50 backdrop-blur-sm">
      <div className="flex justify-start sm:justify-center gap-1 sm:gap-2 p-2 sm:p-4 overflow-x-auto scrollbar-hide">
        {analysisResults && (
          <button
            onClick={() => setActiveView('analysis')}
            className={`px-2 sm:px-4 py-2 rounded-lg transition-colors whitespace-nowrap text-sm sm:text-base ${
              activeView === 'analysis'
                ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30'
                : 'bg-gray-800/50 text-gray-400 hover:bg-gray-800/70'
            }`}
          >
            Analysis
          </button>
        )}
        {optimizationResults && (
          <button
            onClick={() => setActiveView('optimization')}
            className={`px-2 sm:px-4 py-2 rounded-lg transition-colors whitespace-nowrap text-sm sm:text-base ${
              activeView === 'optimization'
                ? 'bg-green-500/20 text-green-400 border border-green-500/30'
                : 'bg-gray-800/50 text-gray-400 hover:bg-gray-800/70'
            }`}
          >
            Optimization
          </button>
        )}
        {convertResult && (
          <button
            onClick={() => setActiveView('convert')}
            className={`px-2 sm:px-4 py-2 rounded-lg transition-colors whitespace-nowrap text-sm sm:text-base ${
              activeView === 'convert'
                ? 'bg-orange-500/20 text-orange-400 border border-orange-500/30'
                : 'bg-gray-800/50 text-gray-400 hover:bg-gray-800/70'
            }`}
          >
            Conversion
          </button>
        )}
        {documentResult && (
          <button
            onClick={() => setActiveView('document')}
            className={`px-2 sm:px-4 py-2 rounded-lg transition-colors whitespace-nowrap text-sm sm:text-base ${
              activeView === 'document'
                ? 'bg-purple-500/20 text-purple-400 border border-purple-500/30'
                : 'bg-gray-800/50 text-gray-400 hover:bg-gray-800/70'
            }`}
          >
            Documentation
          </button>
        )}
      </div>
    </div>
  );
};

export default ViewTabs;
</file>

<file path="src/context/AuthContext.tsx">
// File: src/context/AuthContext.tsx
// Updated with Google OAuth functionality

import React, { createContext, useState, useEffect, ReactNode, useContext } from 'react';
import {
  User,
  fetchCurrentUser,
  login as loginApi,
  signup as signupApi,
  logout as logoutApi,
  initiateGoogleAuth,
  checkAuthStatus
} from '../api/auth';

// Define the shape of the context
interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (username: string, password: string) => Promise<void>;
  signup: (username: string, email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  refreshUser: () => Promise<void>;
  loginWithGoogle: () => void;
  isAuthenticated: boolean;
}

// Create the context
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Provider component
export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // Computed property for authentication status
  const isAuthenticated = user !== null;

  // Refresh the current user from the API
  const refreshUser = async () => {
    try {
      const response = await fetchCurrentUser();
      if (response.data.status === 'success') {
        setUser(response.data.user);
      } else {
        setUser(null);
      }
    } catch (error) {
      console.error('Failed to refresh user:', error);
      setUser(null);
    }
  };

  // Login method for local authentication
  const login = async (username: string, password: string) => {
    try {
      setLoading(true);
      const response = await loginApi(username, password);
      
      if (response.data.status === 'success') {
        setUser(response.data.user);
      } else {
        throw new Error(response.data.message || 'Login failed');
      }
    } catch (error) {
      console.error('Login failed:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // Signup method for local authentication
  const signup = async (username: string, email: string, password: string) => {
    try {
      setLoading(true);
      const response = await signupApi(username, email, password);
      
      if (response.data.status === 'success') {
        setUser(response.data.user);
      } else {
        throw new Error(response.data.message || 'Signup failed');
      }
    } catch (error) {
      console.error('Signup failed:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // Google OAuth login method
  const loginWithGoogle = () => {
    // This will redirect the user to the backend OAuth endpoint
    // The backend will handle the OAuth flow and redirect back to the frontend
    initiateGoogleAuth();
  };

  // Logout method
  const logout = async () => {
    try {
      setLoading(true);
      await logoutApi();
      setUser(null);
    } catch (error) {
      console.error('Logout failed:', error);
      // Even if the API call fails, clear local user state
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  // Check authentication status on mount and periodically
  const checkAuth = async () => {
    try {
      const response = await checkAuthStatus();
      if (response.data.authenticated) {
        await refreshUser();
      } else {
        setUser(null);
      }
    } catch (error) {
      console.error('Auth check failed:', error);
      setUser(null);
    }
  };

  // On mount, try to fetch the user
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        setLoading(true);
        await refreshUser();
      } catch (error) {
        console.error('Failed to initialize auth:', error);
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    initializeAuth();
  }, []);

  // Handle focus events to refresh user data when tab becomes active
  useEffect(() => {
    const handleFocus = () => {
      if (!loading && user) {
        refreshUser();
      }
    };

    window.addEventListener('focus', handleFocus);
    return () => window.removeEventListener('focus', handleFocus);
  }, [loading, user]);

  // Periodic auth check (optional - every 5 minutes)
  useEffect(() => {
    if (!user) return;

    const interval = setInterval(() => {
      checkAuth();
    }, 5 * 60 * 1000); // 5 minutes

    return () => clearInterval(interval);
  }, [user]);

  const contextValue: AuthContextType = {
    user,
    loading,
    login,
    signup,
    logout,
    refreshUser,
    loginWithGoogle,
    isAuthenticated
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

// Hook for easy access
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Additional hook for checking authentication status
export const useIsAuthenticated = (): boolean => {
  const { isAuthenticated } = useAuth();
  return isAuthenticated;
};

// Hook for getting user data
export const useUser = (): User | null => {
  const { user } = useAuth();
  return user;
};
</file>

<file path="src/pages/AuthSuccessPage.tsx">
// src/pages/AuthSuccessPage.tsx
// OAuth Success Page with glassmorphic design

import React, { useEffect, useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate, useLocation } from 'react-router-dom';
import { CheckCircle, AlertCircle, Loader2, Home } from 'lucide-react';
import BeamsBackground from '@/components/beams-backgruond';

interface LocationState {
  from?: {
    pathname: string;
  };
}

const AuthSuccessPage: React.FC = () => {
  const { refreshUser, user } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState('Completing authentication...');

  useEffect(() => {
    const handleAuthSuccess = async () => {
      try {
        setStatus('loading');
        setMessage('Verifying your authentication...');

        // Wait a moment for the backend to set the cookie
        await new Promise(resolve => setTimeout(resolve, 1000));

        // Refresh user data after OAuth success
        await refreshUser();

        // Small delay to show success state
        setStatus('success');
        setMessage('Authentication successful! Redirecting...');

        // Wait a bit to show success message
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Get the original path the user was trying to access
        const state = location.state as LocationState;
        const from = state?.from?.pathname || '/';

        // Redirect to the original path or home
        navigate(from, { replace: true });

      } catch (error) {
        console.error('OAuth success handling failed:', error);
        setStatus('error');
        setMessage('Authentication failed. Please try again.');

        // Redirect to login after showing error
        setTimeout(() => {
          navigate('/login', { replace: true });
        }, 3000);
      }
    };

    handleAuthSuccess();
  }, [refreshUser, navigate, location.state]);

  // Manual redirect function for error state
  const handleRedirect = () => {
    if (status === 'error') {
      navigate('/login', { replace: true });
    } else if (status === 'success' && user) {
      navigate('/', { replace: true });
    }
  };

  return (
    <BeamsBackground>
      <div className="auth-success-container">
        <style>{`
          .auth-success-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 2rem;
          }
          
          .auth-success-card {
            backdrop-filter: blur(10px);
            background-color: rgba(15, 15, 30, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
            padding: 3rem 2rem;
            width: 100%;
            max-width: 420px;
            text-align: center;
            transition: all 0.3s ease;
          }
          
          .auth-success-card:hover {
            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.25);
            border-color: rgba(255, 255, 255, 0.15);
            background-color: rgba(15, 15, 30, 0.35);
          }
          
          .status-icon {
            margin: 0 auto 1.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
          }
          
          .status-icon.loading {
            color: rgba(99, 102, 241, 0.8);
          }
          
          .status-icon.success {
            color: rgba(52, 211, 153, 0.9);
          }
          
          .status-icon.error {
            color: rgba(239, 68, 68, 0.9);
          }
          
          .loading-spinner {
            animation: spin 1s linear infinite;
          }
          
          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
          
          .status-title {
            color: rgba(255, 255, 255, 0.95);
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1rem;
          }
          
          .status-message {
            color: rgba(255, 255, 255, 0.7);
            font-size: 1rem;
            line-height: 1.5;
            margin-bottom: 2rem;
          }
          
          .progress-bar {
            width: 100%;
            height: 4px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 2px;
            overflow: hidden;
            margin-bottom: 2rem;
          }
          
          .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, rgba(99, 102, 241, 0.6), rgba(79, 70, 229, 0.8));
            border-radius: 2px;
            transition: width 0.3s ease;
          }
          
          .progress-fill.loading {
            width: 60%;
            animation: pulse 2s ease-in-out infinite;
          }
          
          .progress-fill.success {
            width: 100%;
            background: linear-gradient(90deg, rgba(52, 211, 153, 0.6), rgba(16, 185, 129, 0.8));
          }
          
          .progress-fill.error {
            width: 100%;
            background: linear-gradient(90deg, rgba(239, 68, 68, 0.6), rgba(220, 38, 38, 0.8));
          }
          
          @keyframes pulse {
            0%, 100% { opacity: 0.6; }
            50% { opacity: 1; }
          }
          
          .redirect-button {
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.6), rgba(79, 70, 229, 0.6));
            border: 1px solid rgba(99, 102, 241, 0.3);
            border-radius: 8px;
            color: white;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 500;
            padding: 0.75rem 1.5rem;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
          }
          
          .redirect-button:hover {
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.7), rgba(79, 70, 229, 0.7));
            border-color: rgba(99, 102, 241, 0.4);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
          }
          
          .redirect-button.error {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.6), rgba(220, 38, 38, 0.6));
            border-color: rgba(239, 68, 68, 0.3);
          }
          
          .redirect-button.error:hover {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.7), rgba(220, 38, 38, 0.7));
            border-color: rgba(239, 68, 68, 0.4);
          }
          
          .user-welcome {
            background-color: rgba(52, 211, 153, 0.1);
            border: 1px solid rgba(52, 211, 153, 0.2);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
          }
          
          .user-welcome-text {
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.875rem;
          }
          
          .user-name {
            color: rgba(52, 211, 153, 0.9);
            font-weight: 600;
          }
        `}</style>
        
        <div className="auth-success-card">
          {/* Status Icon */}
          <div className={`status-icon ${status}`}>
            {status === 'loading' && (
              <Loader2 className="h-12 w-12 loading-spinner" />
            )}
            {status === 'success' && (
              <CheckCircle className="h-12 w-12" />
            )}
            {status === 'error' && (
              <AlertCircle className="h-12 w-12" />
            )}
          </div>
          
          {/* Status Title */}
          <h2 className="status-title">
            {status === 'loading' && 'Authenticating...'}
            {status === 'success' && 'Welcome!'}
            {status === 'error' && 'Authentication Failed'}
          </h2>
          
          {/* User Welcome Message for Success */}
          {status === 'success' && user && (
            <div className="user-welcome">
              <div className="user-welcome-text">
                Welcome back, <span className="user-name">
                  {user.first_name || user.username}
                </span>!
              </div>
            </div>
          )}
          
          {/* Status Message */}
          <p className="status-message">{message}</p>
          
          {/* Progress Bar */}
          <div className="progress-bar">
            <div className={`progress-fill ${status}`}></div>
          </div>
          
          {/* Manual Redirect Button (shows after error or for manual control) */}
          {(status === 'error' || (status === 'success' && user)) && (
            <button 
              onClick={handleRedirect}
              className={`redirect-button ${status}`}
            >
              {status === 'error' ? (
                <>
                  <AlertCircle className="h-4 w-4" />
                  <span>Back to Login</span>
                </>
              ) : (
                <>
                  <Home className="h-4 w-4" />
                  <span>Go to Dashboard</span>
                </>
              )}
            </button>
          )}
        </div>
      </div>
    </BeamsBackground>
  );
};

export default AuthSuccessPage;
</file>

<file path="src/pages/LandingPage.tsx">
import { motion } from "motion/react";
import { AuroraBackground } from "../components/landing-page/ui/AuroraBackground";
import Header from "../components/landing-page/Header";
import { GlowingEffectGrid } from "../components/landing-page/GlowingEffectGrid";
import CodeOptimizationSection from "../components/landing-page/CodeOptimizationSection";
// import InteractiveWorkflowSection from "../components/landing-page/InteractiveWorkflowSection";
import CodeCompareSection from "../components/landing-page/CodeCompareSection";
import WaitingListSection from "../components/landing-page/WaitingListSection";
import Footer from "../components/landing-page/Footer";

export default function LandingPage() {
  return (
    <>
      {/* 1) Fixed Aurora, but no pointer blocking */}
      <AuroraBackground
        className="fixed inset-0 z-0 pointer-events-none"
      >
        <div />
      </AuroraBackground>

      {/* 2) Single stacking context above the background */}
      <div className="relative z-10 flex flex-col min-h-screen">
        <Header />

        {/* 3) Main scrollable content */}
        <main className="flex-grow">
          <section className="h-screen flex items-center justify-center px-4 text-center">
            <motion.div
              initial={{ opacity: 0, y: 40 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3, duration: 0.8, ease: "easeInOut" }}
            >
              <h1 className="text-3xl md:text-7xl font-bold dark:text-white">
                Agentic AI: Next-Level Analytics
              </h1>
              <p className="mt-4 font-extralight text-base md:text-4xl dark:text-neutral-200">
                Automate. Integrate. Optimize.
              </p>
              <button className="mt-8 bg-black dark:bg-white rounded-full w-fit text-white dark:text-black px-6 py-3">
                Start Free Trial
              </button>
            </motion.div>
          </section>

          <section className="py-16 px-4">
            <GlowingEffectGrid />
          </section>

          <CodeOptimizationSection />
          
          {/* Uncomment when InteractiveWorkflowSection is converted */}
          {/* <InteractiveWorkflowSection /> */}
          
          <CodeCompareSection />
          <WaitingListSection />
        </main>

        {/* 4) Footer now lives in the same z-10 context */}
        <Footer />
      </div>
    </>
  );
}
</file>

<file path="src/pages/LoginPage.tsx">
import React, { useState, FormEvent } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import { LogIn, User, Lock, AlertCircle } from 'lucide-react';
import BeamsBackground from '@/components/beams-backgruond';
import {IconBrandGoogle} from '@tabler/icons-react';

const LoginPage: React.FC = () => {
  const { login,loginWithGoogle } = useAuth();
  const navigate = useNavigate();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    try {
      await login(username, password);
      navigate('/'); // protected home
    } catch (err: any) {
      setError(err.response?.data?.message || 'Login failed');
    }
  };

  return (
    <BeamsBackground>
    <div className="glassmorphic-login-container">
      <style>{`
        .glassmorphic-login-container {
          display: flex;
          justify-content: center;
          align-items: center;
          min-height: 80vh;
          padding: 2rem;
        }
        
        .glassmorphic-login-card {
          backdrop-filter: blur(10px);
          background-color: rgba(15, 15, 30, 0.3);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 12px;
          box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
          padding: 2rem;
          width: 100%;
          max-width: 420px;
          transition: all 0.3s ease;
        }
        
        .glassmorphic-login-card:hover {
          box-shadow: 0 15px 40px rgba(0, 0, 0, 0.25);
          border-color: rgba(255, 255, 255, 0.15);
          background-color: rgba(15, 15, 30, 0.35);
        }
        
        .glass-title {
          color: rgba(255, 255, 255, 0.95);
          font-size: 1.75rem;
          font-weight: 600;
          margin-bottom: 1.5rem;
          text-align: center;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 0.5rem;
        }
        
        .glass-input-group {
          margin-bottom: 1.5rem;
        }
        
        .glass-label {
          color: rgba(255, 255, 255, 0.8);
          display: block;
          font-size: 0.875rem;
          margin-bottom: 0.5rem;
        }
        
        .glass-input-wrapper {
          position: relative;
        }
        
        .glass-input {
          background-color: rgba(255, 255, 255, 0.05);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 8px;
          color: rgba(255, 255, 255, 0.9);
          font-size: 1rem;
          padding: 0.75rem 1rem 0.75rem 2.5rem;
          width: 100%;
          transition: all 0.2s ease;
        }
        
        .glass-input:focus {
          background-color: rgba(255, 255, 255, 0.08);
          border-color: rgba(255, 255, 255, 0.2);
          outline: none;
          box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
        }
        
        .glass-input::placeholder {
          color: rgba(255, 255, 255, 0.4);
        }
        
        .glass-input-icon {
          position: absolute;
          left: 0.75rem;
          top: 50%;
          transform: translateY(-50%);
          color: rgba(255, 255, 255, 0.5);
        }
        
        .glass-button {
          background: linear-gradient(135deg, rgba(99, 102, 241, 0.6), rgba(79, 70, 229, 0.6));
          border: 1px solid rgba(99, 102, 241, 0.3);
          border-radius: 8px;
          color: white;
          cursor: pointer;
          font-size: 1rem;
          font-weight: 500;
          padding: 0.75rem 1rem;
          width: 100%;
          transition: all 0.2s ease;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 0.5rem;
        }
        
        .glass-button:hover {
          background: linear-gradient(135deg, rgba(99, 102, 241, 0.7), rgba(79, 70, 229, 0.7));
          border-color: rgba(99, 102, 241, 0.4);
          transform: translateY(-1px);
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .glass-button:active {
          transform: translateY(0);
        }
        
        .glass-error {
          background-color: rgba(239, 68, 68, 0.15);
          border: 1px solid rgba(239, 68, 68, 0.3);
          border-radius: 8px;
          color: rgba(255, 255, 255, 0.9);
          display: flex;
          align-items: center;
          gap: 0.5rem;
          margin-bottom: 1.5rem;
          padding: 0.75rem;
        }

        .signup-link {
          text-align: center;
          margin-top: 1rem;
          color: rgba(255, 255, 255, 0.7);
          font-size: 0.875rem;
        }

        .signup-link a {
          color: rgba(99, 102, 241, 0.9);
          text-decoration: none;
          font-weight: 500;
          transition: color 0.2s ease;
        }

        .signup-link a:hover {
          color: rgba(99, 102, 241, 1);
          text-decoration: underline;
        }

        .oauth-divider {
  display: flex;
  align-items: center;
  margin: 1.5rem 0;
  color: rgba(255, 255, 255, 0.5);
  font-size: 0.875rem;
}

.oauth-divider::before,
.oauth-divider::after {
  content: '';
  flex: 1;
  height: 1px;
  background: rgba(255, 255, 255, 0.1);
}

.oauth-divider span {
  padding: 0 1rem;
}

.oauth-button {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 8px;
  color: rgba(255, 255, 255, 0.9);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 0.75rem;
  transition: all 0.2s ease;
  width: 100%;
  margin-bottom: 1rem;
}

.oauth-button:hover {
  background: rgba(255, 255, 255, 0.08);
  border-color: rgba(66, 133, 244, 0.4);
  transform: translateY(-1px);
}
      `}</style>
      
      <div className="glassmorphic-login-card">
        <h2 className="glass-title">
          <LogIn className="h-6 w-6" />
          <span>Log In</span>
        </h2>
        
        {error && (
          <div className="glass-error">
            <AlertCircle className="h-5 w-5" />
            <span>{error}</span>
          </div>
        )}
        <button 
  type="button" 
  className="oauth-button"
  onClick={loginWithGoogle}
>
  <IconBrandGoogle className="h-4 w-4" />
  <span>Continue with Google</span>
</button>

<div className="oauth-divider">
  <span>or continue with email</span>
</div>
        
        <form onSubmit={handleSubmit}>
          <div className="glass-input-group">
            <label className="glass-label">Username</label>
            <div className="glass-input-wrapper">
              <User className="h-4 w-4 glass-input-icon" />
              <input
                type="text"
                value={username}
                onChange={e => setUsername(e.target.value)}
                className="glass-input"
                placeholder="Enter your username"
                required
              />
            </div>
          </div>
          
          <div className="glass-input-group">
            <label className="glass-label">Password</label>
            <div className="glass-input-wrapper">
              <Lock className="h-4 w-4 glass-input-icon" />
              <input
                type="password"
                value={password}
                onChange={e => setPassword(e.target.value)}
                className="glass-input"
                placeholder="Enter your password"
                required
              />
            </div>
          </div>
          
          <button type="submit" className="glass-button">
            <LogIn className="h-5 w-5" />
            <span>Log In</span>
          </button>
          
          <div className="signup-link">
            Don't have an account? <a href="/signup">Sign up</a>
          </div>
        </form>
      </div>
    </div>
    </BeamsBackground>
  );
};

export default LoginPage;
</file>

<file path="src/pages/SignupPage.tsx">
// File: src/pages/SignupPage.tsx
// Updated with glassmorphic UI design

import React, { useState, FormEvent } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate, Link } from 'react-router-dom';
import { UserPlus, User, Mail, Lock, AlertCircle } from 'lucide-react';
import BeamsBackground from '@/components/beams-backgruond';
import {IconBrandGoogle} from '@tabler/icons-react';

const SignupPage: React.FC = () => {
  const { signup, loginWithGoogle } = useAuth();
  const navigate = useNavigate();
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirm, setConfirm] = useState('');
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (password !== confirm) {
      setError('Passwords do not match');
      return;
    }
    try {
      await signup(username, email, password);
      navigate('/');
    } catch (err: any) {
      setError(err.response?.data?.message || 'Signup failed');
    }
  };

  return (
    <BeamsBackground>
      <div className="glassmorphic-signup-container">
        <style>{`
          .glassmorphic-signup-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 80vh;
            padding: 2rem;
          }
          
          .glassmorphic-signup-card {
            backdrop-filter: blur(10px);
            background-color: rgba(15, 15, 30, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            padding: 2rem;
            width: 100%;
            max-width: 420px;
            transition: all 0.3s ease;
          }
          
          .glassmorphic-signup-card:hover {
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.25);
            border-color: rgba(255, 255, 255, 0.15);
            background-color: rgba(15, 15, 30, 0.35);
          }
          
          .glass-title {
            color: rgba(255, 255, 255, 0.95);
            font-size: 1.75rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
          }
          
          .glass-input-group {
            margin-bottom: 1.5rem;
          }
          
          .glass-label {
            color: rgba(255, 255, 255, 0.8);
            display: block;
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
          }
          
          .glass-input-wrapper {
            position: relative;
          }
          
          .glass-input {
            background-color: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            font-size: 1rem;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            width: 100%;
            transition: all 0.2s ease;
          }
          
          .glass-input:focus {
            background-color: rgba(255, 255, 255, 0.08);
            border-color: rgba(255, 255, 255, 0.2);
            outline: none;
            box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
          }
          
          .glass-input::placeholder {
            color: rgba(255, 255, 255, 0.4);
          }
          
          .glass-input-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: rgba(255, 255, 255, 0.5);
          }
          
          .glass-button {
            background: linear-gradient(135deg, rgba(52, 211, 153, 0.6), rgba(16, 185, 129, 0.6));
            border: 1px solid rgba(52, 211, 153, 0.3);
            border-radius: 8px;
            color: white;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            padding: 0.75rem 1rem;
            width: 100%;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
          }
          
          .glass-button:hover {
            background: linear-gradient(135deg, rgba(52, 211, 153, 0.7), rgba(16, 185, 129, 0.7));
            border-color: rgba(52, 211, 153, 0.4);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
          }
          
          .glass-button:active {
            transform: translateY(0);
          }
          
          .glass-error {
            background-color: rgba(239, 68, 68, 0.15);
            border: 1px solid rgba(239, 68, 68, 0.3);
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
            padding: 0.75rem;
          }

          .login-link {
            text-align: center;
            margin-top: 1rem;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.875rem;
          }

          .login-link a {
            color: rgba(52, 211, 153, 0.9);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.2s ease;
          }

          .login-link a:hover {
            color: rgba(52, 211, 153, 1);
            text-decoration: underline;
          }

          .oauth-divider {
  display: flex;
  align-items: center;
  margin: 1.5rem 0;
  color: rgba(255, 255, 255, 0.5);
  font-size: 0.875rem;
}

.oauth-divider::before,
.oauth-divider::after {
  content: '';
  flex: 1;
  height: 1px;
  background: rgba(255, 255, 255, 0.1);
}

.oauth-divider span {
  padding: 0 1rem;
}

.oauth-button {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 8px;
  color: rgba(255, 255, 255, 0.9);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 0.75rem;
  transition: all 0.2s ease;
  width: 100%;
  margin-bottom: 1rem;
}

.oauth-button:hover {
  background: rgba(255, 255, 255, 0.08);
  border-color: rgba(66, 133, 244, 0.4);
  transform: translateY(-1px);
}
        `}</style>
        
        <div className="glassmorphic-signup-card">
          <h2 className="glass-title">
            <UserPlus className="h-6 w-6" />
            <span>Sign Up</span>
          </h2>
          
          {error && (
            <div className="glass-error">
              <AlertCircle className="h-5 w-5" />
              <span>{error}</span>
            </div>
          )}
          <button 
  type="button" 
  className="oauth-button"
  onClick={loginWithGoogle}
>
  <IconBrandGoogle className="h-4 w-4" />
  <span>Sign up with Google</span>
</button>

<div className="oauth-divider">
  <span>or sign up with email</span>
</div>
          
          <form onSubmit={handleSubmit}>
            <div className="glass-input-group">
              <label className="glass-label">Username</label>
              <div className="glass-input-wrapper">
                <User className="h-4 w-4 glass-input-icon" />
                <input
                  type="text"
                  value={username}
                  onChange={e => setUsername(e.target.value)}
                  className="glass-input"
                  placeholder="Choose a username"
                  required
                />
              </div>
            </div>
            
            <div className="glass-input-group">
              <label className="glass-label">Email</label>
              <div className="glass-input-wrapper">
                <Mail className="h-4 w-4 glass-input-icon" />
                <input
                  type="email"
                  value={email}
                  onChange={e => setEmail(e.target.value)}
                  className="glass-input"
                  placeholder="Enter your email"
                  required
                />
              </div>
            </div>
            
            <div className="glass-input-group">
              <label className="glass-label">Password</label>
              <div className="glass-input-wrapper">
                <Lock className="h-4 w-4 glass-input-icon" />
                <input
                  type="password"
                  value={password}
                  onChange={e => setPassword(e.target.value)}
                  className="glass-input"
                  placeholder="Create a password"
                  required
                />
              </div>
            </div>
            
            <div className="glass-input-group">
              <label className="glass-label">Confirm Password</label>
              <div className="glass-input-wrapper">
                <Lock className="h-4 w-4 glass-input-icon" />
                <input
                  type="password"
                  value={confirm}
                  onChange={e => setConfirm(e.target.value)}
                  className="glass-input"
                  placeholder="Confirm your password"
                  required
                />
              </div>
            </div>
            
            <button type="submit" className="glass-button">
              <UserPlus className="h-5 w-5" />
              <span>Sign Up</span>
            </button>
            
            <div className="login-link">
              Already have an account? <Link to="/login">Log In</Link>
            </div>
          </form>
        </div>
      </div>
    </BeamsBackground>
  );
};

export default SignupPage;
</file>

<file path="src/types/api.ts">
// src/types/api.ts

// Types for analyzeCode
export interface AnalysisCategory {
    name: string;
    hasIssues: boolean;
    issues: {
      title: string;
      location: string;
      reason: string;
      suggestion: string;
    }[];
  }
  
  export interface LanguageInfo {
    name: string;
    confidence: number;
    color: string;
  }
  
  export interface WorkflowData {
    steps?: { id: string; label: string }[];
    dependencies?: { from: string; to: string }[];
    optimizable_steps?: { id: string; reason: string }[];
  }
  
  export interface ScoreCategory {
    score: number;
    explanation: string;
  }
  
  export interface ScoreData {
    overall: number;
    categories: {
      maintainability: ScoreCategory;
      performance: ScoreCategory;
      readability: ScoreCategory;
      security: ScoreCategory;
      testCoverage: ScoreCategory;
    };
  }
  
  export interface AnalysisResult {
    categories: AnalysisCategory[];
    detectedLanguage: LanguageInfo;
    workflow?: WorkflowData;
    scores?: ScoreData;
    functionalityAnalysis?: string;
  }
  
  // Types for optimizeCode
  export interface DetailedChange {
    issue: string;
    improvement: string;
    location: string;
    metric: string;
  }
  
  export interface OptimizationResult {
    optimizedCode: string;
    metrics: {
      executionTime: { value: number; label: string; improvement: boolean };
      memoryUsage: { value: number; label: string; improvement: boolean };
      codeComplexity: { value: number; label: string; improvement: boolean };
    };
    changedLines: number[];
    optimized_code_flowchart?: WorkflowData;
    detailed_changes?: DetailedChange[];
    improvement_summary?: string;
    improvement_percentages?: {
      execution_time: number;
      memory_usage: number;
      code_complexity: number;
    };
  }
</file>

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="public/robots.txt">
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /
</file>

<file path="src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="src/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="src/components/ui/custom-progress.css">
/* Custom styling for progress bars - can be imported where needed */

.progress-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 80px;
  height: 80px;
}

.progress-circle {
  transform: rotate(-90deg);
  transform-origin: 50% 50%;
}

.progress-circle-bg {
  fill: none;
  stroke-width: 6;
  stroke-linecap: round;
}

.progress-circle-value {
  fill: none;
  stroke-width: 6;
  stroke-linecap: round;
  transition: stroke-dashoffset 0.5s ease;
}

.progress-text {
  position: absolute;
  font-size: 1rem;
  font-weight: 600;
  text-align: center;
}
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/drawer.tsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/hover-card.tsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="src/components/ui/input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="src/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/resizable.tsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>

<file path="src/components/ui/sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/components/ui/sonner.tsx">
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }
</file>

<file path="src/components/ui/switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="src/components/ui/tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/ui/use-toast.ts">
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };
</file>

<file path="src/components/Header.tsx">
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';
import { LogOut, Code } from 'lucide-react';

const Header: React.FC = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  
  const handleLogout = async () => {
    try {
      await logout();
      navigate('/login');
    } catch (err) {
      console.error('Logout failed', err);
    }
  };

  return (
    <header className="glassmorphic-header">
      <style>{`
        .glassmorphic-header {
          backdrop-filter: blur(10px);
          background-color: rgba(15, 15, 30, 0.3);
          border-bottom: 1px solid rgba(255, 255, 255, 0.1);
          box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
          padding: 1rem;
          transition: all 0.3s ease;
          position: sticky;
          top: 0;
          z-index: 50;
        }
        
        .glassmorphic-header:hover {
          background-color: rgba(15, 15, 30, 0.35);
          border-color: rgba(255, 255, 255, 0.15);
        }
        
        .glass-logo {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          color: rgba(255, 255, 255, 0.9);
          font-weight: 600;
          text-decoration: none;
          transition: all 0.2s ease;
        }
        
        .glass-logo:hover {
          color: rgba(255, 255, 255, 1);
          transform: translateY(-1px);
        }
        
        .glass-btn {
          background-color: rgba(255, 255, 255, 0.07);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 6px;
          color: rgba(255, 255, 255, 0.85);
          cursor: pointer;
          display: flex;
          align-items: center;
          gap: 0.5rem;
          padding: 0.5rem 1rem;
          transition: all 0.2s ease;
        }
        
        .glass-btn:hover {
          background-color: rgba(255, 255, 255, 0.12);
          border-color: rgba(255, 255, 255, 0.2);
          transform: translateY(-1px);
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .glass-btn-logout {
          background-color: rgba(239, 68, 68, 0.2);
          border-color: rgba(239, 68, 68, 0.3);
        }
        
        .glass-btn-logout:hover {
          background-color: rgba(239, 68, 68, 0.3);
          border-color: rgba(239, 68, 68, 0.4);
        }
        
        .welcome-text {
          color: rgba(255, 255, 255, 0.7);
          font-size: 0.875rem;
        }
      `}</style>
      
      <div className="max-w-7xl mx-auto flex justify-between items-center">
        <Link to="/" className="glass-logo">
          <Code className="h-5 w-5" />
          <span>CodeSpark Optimizer</span>
        </Link>
        
        <div className="flex items-center space-x-4">
          
          <button
            onClick={handleLogout}
            className="glass-btn glass-btn-logout"
          >
            <LogOut className="h-4 w-4" />
            <span>Logout</span>
          </button>
        </div>
      </div>
    </header>
  );
};

export default Header;
</file>

<file path="src/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="src/hooks/use-toast.ts">
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/NotFound.tsx">
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;
</file>

<file path="src/App.tsx">
// File: src/App.tsx
// Updated to include OAuth success route and improved routing structure

import React from 'react';
import { Toaster } from '@/components/ui/toaster';
import { Toaster as Sonner } from '@/components/ui/sonner';
import { TooltipProvider } from '@/components/ui/tooltip';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';

// Authentication
import { AuthProvider } from '@/context/AuthContext';
import PrivateRoute from './components/PrivateRoute';
import LoginPage from './pages/LoginPage';
import SignupPage from './pages/SignupPage';
import AuthSuccessPage from './pages/AuthSuccessPage';

// Main pages
import Index from './pages/Index';
import NotFound from './pages/NotFound';

const queryClient = new QueryClient();

const App: React.FC = () => (
  <QueryClientProvider client={queryClient}>
    <AuthProvider>
      <TooltipProvider>
        <Toaster />
        <Sonner />
        <BrowserRouter>
          <Routes>
            {/* Public authentication routes */}
            <Route path="/login" element={<LoginPage />} />
            <Route path="/signup" element={<SignupPage />} />
            
            {/* OAuth callback route - public but handles authentication */}
            <Route path="/auth/success" element={<AuthSuccessPage />} />
            
            {/* Protected home (Index) route */}
            <Route
              path="/"
              element={
                <PrivateRoute>
                  <Index />
                </PrivateRoute>
              }
            />
            
            {/* Protected dashboard route (example additional route) */}
            <Route
              path="/dashboard"
              element={
                <PrivateRoute>
                  <Index />
                </PrivateRoute>
              }
            />
            
            {/* Redirect /home to / for consistency */}
            <Route path="/home" element={<Navigate to="/" replace />} />
            
            {/* Catch-all fallback */}
            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
      </TooltipProvider>
    </AuthProvider>
  </QueryClientProvider>
);

export default App;
</file>

<file path="src/main.tsx">
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);
</file>

<file path=".gitignore">
# Dependencies
node_modules/
.pnp/
.pnp.js

# Next.js build output
.next/
out/
build/

# TypeScript
*.tsbuildinfo
next-env.d.ts

# Testing
coverage/
test-results/
playwright-report/
playwright/.cache/

# Storybook
storybook-static/
*.storybook.log

# Environment variables
.env
.env.local
.env.development
.env.test
.env.production

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# OS-specific files
.DS_Store
Thumbs.db

# IDEs and editors
.vscode/
.idea/
*.code-workspace

# Miscellaneous
*.pem
.vercel/
local/
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="eslint.config.js">
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>code-spark-optimizer</title>
    <meta name="description" content="Lovable Generated Project" />
    <meta name="author" content="Lovable" />

    <meta property="og:title" content="code-spark-optimizer" />
    <meta property="og:description" content="Lovable Generated Project" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/a9c78c54-ccf2-43d3-80dc-d8cc31e2a940

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/a9c78c54-ccf2-43d3-80dc-d8cc31e2a940) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with:

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/a9c78c54-ccf2-43d3-80dc-d8cc31e2a940) and click on Share -> Publish.

## Can I connect a custom domain to my Lovable project?

Yes, you can!

To connect a domain, navigate to Project > Settings > Domains and click Connect Domain.

Read more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));
</file>

<file path="src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & {
    indicatorClassName?: string;
  }
>(({ className, value, indicatorClassName, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className={cn(
        "h-full w-full flex-1 bg-primary transition-all",
        indicatorClassName
      )}
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/pages/Index.tsx">
import CodeOptimizer from '@/components/CodeOptimizer';
import Header from '@/components/Header';
import BeamsBackground from '@/components/beams-backgruond';


const Index = () => (

    <BeamsBackground>
      <Header/>
      <CodeOptimizer />
    </BeamsBackground>

);

export default Index;
</file>

<file path="src/App.css">
/* This file is kept for compatibility but all styles are now in index.css */
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				editor: {
					bg: '#1e1e1e',
					line: '#2a2a2a',
					highlight: 'rgba(62, 185, 145, 0.1)',
					added: 'rgba(46, 160, 67, 0.15)',
					removed: 'rgba(248, 81, 73, 0.15)'
				},
				brand: {
					50:  '#f5f7ff',
					100: '#dfe4ff',
					200: '#b3bfff',
					500: '#5f6eff',
					700: '#3f49ff',
				  }
			},
			
			backgroundImage: {
				'page-gradient': 'linear-gradient(90deg,rgba(23, 11, 59, 1) 0%, rgba(0, 0, 0, 1) 100%)',
			  },
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'fade-in': {
					from: { opacity: '0' },
					to: { opacity: '1' }
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'fade-in': 'fade-in 0.3s ease-in-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

// Define the variants
const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

// React.forwardRef implementation
const Badge = React.forwardRef<HTMLDivElement, BadgeProps>(
  ({ className, variant, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(badgeVariants({ variant }), className)}
        {...props}
      />
    )
  }
)

// Set display name for debugging
Badge.displayName = "Badge";

export { Badge, badgeVariants }
</file>

<file path="src/components/DetailedChanges.tsx">
import React from 'react';
import { AlertTriangle } from "lucide-react";
import { 
  Accordion, 
  AccordionContent, 
  AccordionItem, 
  AccordionTrigger 
} from "@/components/ui/accordion";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

interface DetailedChange {
  issue: string;
  improvement: string;
  location: string;
  metric: string;
}

interface DetailedChangesProps {
  changes: DetailedChange[];
}

const DetailedChanges: React.FC<DetailedChangesProps> = ({ changes }) => {
  if (!changes || changes.length === 0) {
    return <div className="p-4">No detailed changes available</div>;
  }

  // Group changes by metric
  const changesByMetric: Record<string, DetailedChange[]> = {};
  
  changes.forEach(change => {
    if (!changesByMetric[change.metric]) {
      changesByMetric[change.metric] = [];
    }
    changesByMetric[change.metric].push(change);
  });
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      {Object.entries(changesByMetric).map(([metric, metricChanges], index) => (
        <Card 
          key={index} 
          className="border border-amber-700/30 bg-amber-950/10 transition-all duration-300 hover:shadow-md"
        >
          <CardHeader className="pb-2">
            <div className="flex items-center justify-between">
              <CardTitle className="text-sm font-medium flex items-center gap-2">
                <AlertTriangle size={16} className="text-amber-500" />
                {metric}
              </CardTitle>
              <span className="text-xs px-2 py-0.5 bg-amber-500/20 text-amber-400 rounded-full">
                {metricChanges.length} {metricChanges.length === 1 ? 'change' : 'changes'}
              </span>
            </div>
            <CardDescription className="text-xs">
              {metricChanges.length} optimization {metricChanges.length === 1 ? 'change' : 'changes'} applied
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Accordion type="single" collapsible className="w-full">
              {metricChanges.map((change, issueIndex) => (
                <AccordionItem key={issueIndex} value={`issue-${issueIndex}`}>
                  <AccordionTrigger className="text-sm">{change.issue}</AccordionTrigger>
                  <AccordionContent>
                    <div className="space-y-3 text-sm">
                      <div>
                        <div className="font-medium text-xs text-muted-foreground mb-1">CODE LOCATION</div>
                        <div className="bg-secondary/50 px-3 py-1 rounded-sm">{change.location}</div>
                      </div>
                      <div>
                        <div className="font-medium text-xs text-muted-foreground mb-1">IMPROVEMENT</div>
                        <p className="text-primary">{change.improvement}</p>
                      </div>
                    </div>
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

export default DetailedChanges;
</file>

<file path="src/components/MetricsCard.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

interface MetricsCardProps {
  title: string;
  value: number;
  label: string;
  description: string;
  color?: string;
  tooltipText?: string;
  improvement?: boolean;
}

const MetricsCard: React.FC<MetricsCardProps> = ({
  title,
  value,
  label,
  description,
  color = 'bg-primary',
  tooltipText,
  improvement = true
}) => {
  return (
    <Card>
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm font-medium">{title}</CardTitle>
          {tooltipText && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <div className="h-4 w-4 rounded-full bg-muted flex items-center justify-center cursor-help">
                    <span className="text-muted-foreground text-xs">?</span>
                  </div>
                </TooltipTrigger>
                <TooltipContent>
                  <p className="w-[200px] text-xs">{tooltipText}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}
        </div>
        <CardDescription className="text-xs">{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex items-center justify-between mb-2">
          <span className="text-2xl font-bold">
            {value}
            <span className="text-sm font-normal ml-1">{label}</span>
          </span>
          <span className={`text-xs px-2 py-1 rounded-full ${improvement ? 'bg-green-500/20 text-green-400' : 'bg-red-500/20 text-red-400'}`}>
            {improvement ? '↓' : '↑'} {Math.abs(value)}%
          </span>
        </div>
        <Progress value={value} className={`h-1.5 ${color}`} />
      </CardContent>
    </Card>
  );
};

export default MetricsCard;
</file>

<file path="src/components/OptimizationImprovementSummary.tsx">
import React from 'react';
import { Card, CardContent } from "@/components/ui/card";

interface OptimizationImprovementSummaryProps {
  content: string;
}

const OptimizationImprovementSummary: React.FC<OptimizationImprovementSummaryProps> = ({ content }) => {
  // Split the content by markdown headers to create sections
  const sections = content
    .split(/(?=^#+\s+.*$)/m)
    .filter(section => section.trim() !== '');
  
  // Function to extract the header title from a section
  const getHeaderTitle = (section: string): string => {
    const headerMatch = section.match(/^#+\s+(.*?)$/m);
    return headerMatch ? headerMatch[1] : 'Overview';
  };
  
  // Function to format the content with basic markdown-like styling
  const formatContent = (text: string): React.ReactNode => {
    // Remove the header from the beginning of the section
    const content = text.replace(/^#+\s+.*?$/m, '').trim();
    
    // Split by paragraphs and format each
    return content.split(/\n{2,}/g).map((paragraph, idx) => {
      // Format table
      if (paragraph.match(/\|\s*-+\s*\|/)) {
        const rows = paragraph.split('\n').filter(row => row.trim() !== '');
        if (rows.length >= 2) {
          const headers = rows[0].split('|').filter(cell => cell.trim() !== '').map(cell => cell.trim());
          
          return (
            <div key={idx} className="overflow-x-auto my-4">
              <table className="min-w-full divide-y divide-border">
                <thead>
                  <tr>
                    {headers.map((header, i) => (
                      <th key={i} className="px-4 py-2 text-left text-sm font-medium text-muted-foreground bg-secondary/50">{header}</th>
                    ))}
                  </tr>
                </thead>
                <tbody className="divide-y divide-border">
                  {rows.slice(2).map((row, rowIdx) => {
                    const cells = row.split('|').filter(cell => cell.trim() !== '').map(cell => cell.trim());
                    return (
                      <tr key={rowIdx}>
                        {cells.map((cell, cellIdx) => (
                          <td key={cellIdx} className="px-4 py-2 text-sm">{cell}</td>
                        ))}
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          );
        }
      }
      
      // Format code blocks
      if (paragraph.match(/^```[\s\S]*?```$/m)) {
        const code = paragraph.replace(/^```(\w+)?\n([\s\S]*?)```$/m, '$2');
        const language = paragraph.match(/^```(\w+)?/)?.[1] || '';
        return (
          <pre key={idx} className="bg-secondary/20 p-4 rounded-md my-4 overflow-x-auto">
            <code className="text-sm text-primary">{code}</code>
          </pre>
        );
      }
      
      // Format bullet points
      if (paragraph.match(/^\s*[-*]\s+/m)) {
        const items = paragraph
          .split(/\n/)
          .filter(line => line.trim() !== '')
          .map(line => line.replace(/^\s*[-*]\s+/, ''));
        
        return (
          <ul key={idx} className="list-disc pl-5 my-3 space-y-1">
            {items.map((item, i) => (
              <li key={i} className="text-sm">{item}</li>
            ))}
          </ul>
        );
      }
      
      // Format numbered lists
      if (paragraph.match(/^\s*\d+\.\s+/m)) {
        const items = paragraph
          .split(/\n/)
          .filter(line => line.trim() !== '')
          .map(line => line.replace(/^\s*\d+\.\s+/, ''));
        
        return (
          <ol key={idx} className="list-decimal pl-5 my-3 space-y-1">
            {items.map((item, i) => (
              <li key={i} className="text-sm">{item}</li>
            ))}
          </ol>
        );
      }
      
      // Format bold text
      let formatted = paragraph.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      
      // Format italic text
      formatted = formatted.replace(/\*(.*?)\*/g, '<em>$1</em>');
      
      // Format inline code
      formatted = formatted.replace(/`(.*?)`/g, '<code>$1</code>');
      
      // Secondary headers
      if (formatted.match(/^#+\s+/)) {
        const level = (formatted.match(/^(#+)/) || ['#'])[0].length;
        const text = formatted.replace(/^#+\s+/, '');
        return (
          <div key={idx} 
            className={`font-semibold my-3 ${
              level === 2 ? 'text-lg' : 
              level === 3 ? 'text-base' : 
              'text-sm'
            }`}>
            {text}
          </div>
        );
      }
      
      return (
        <p key={idx} 
           className="my-3 text-sm leading-relaxed" 
           dangerouslySetInnerHTML={{ __html: formatted }} />
      );
    });
  };

  return (
    <Card className="border border-border">
      <CardContent className="p-6">
        <div className="space-y-6">
          {sections.map((section, index) => {
            const title = getHeaderTitle(section);
            return (
              <div key={index} className="pb-4">
                <h3 className="text-base font-semibold border-b border-border pb-2 mb-3">{title}</h3>
                <div className="prose prose-sm max-w-none dark:prose-invert prose-headings:mb-2 prose-p:my-2">
                  {formatContent(section)}
                </div>
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
};

export default OptimizationImprovementSummary;
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="src/components/MetricsDashboard.tsx">
import React from 'react';
import MetricsCard from './MetricsCard';

interface MetricData {
  value: number;
  label: string;
  improvement: boolean;
}

interface MetricsDashboardProps {
  executionTime: MetricData;
  memoryUsage: MetricData;
  codeComplexity: MetricData;
}

const MetricsDashboard: React.FC<MetricsDashboardProps> = ({
  executionTime,
  memoryUsage,
  codeComplexity
}) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
      <MetricsCard 
        title="Execution Time" 
        value={executionTime.value} 
        label={executionTime.label}
        description="Time required to execute the code"
        tooltipText="Lower execution time means your code runs more efficiently, saving computational resources."
        improvement={executionTime.improvement}
      />
      <MetricsCard 
        title="Memory Usage" 
        value={memoryUsage.value} 
        label={memoryUsage.label}
        description="Memory consumed during execution"
        tooltipText="Reduced memory usage means your application requires fewer resources to run."
        color="bg-blue-500"
        improvement={memoryUsage.improvement}
      />
      <MetricsCard 
        title="Code Complexity" 
        value={codeComplexity.value} 
        label={codeComplexity.label}
        description="Cyclomatic complexity score"
        tooltipText="Lower complexity scores indicate code that is easier to understand, test, and maintain."
        color="bg-purple-500"
        improvement={codeComplexity.improvement}
      />
    </div>
  );
};

export default MetricsDashboard;
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;

    --card: 224 71% 4%;
    --card-foreground: 213 31% 91%;

    --popover: 224 71% 4%;
    --popover-foreground: 213 31% 91%;

    --primary: 210 100% 66%;
    --primary-foreground: 0 0% 100%;

    --secondary: 222 47% 11%;
    --secondary-foreground: 210 40% 98%;

    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;

    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --border: 216 34% 17%;
    --input: 216 34% 17%;
    --ring: 224 71% 4%;

    --radius: 0.5rem;
    
    /* Editor-specific colors */
    --editor-bg: 222 47% 11%;
    --editor-added: 142 70% 20%;
    --editor-removed: 0 70% 20%;
    --editor-highlight: 217 70% 20%;
  }

  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }

  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
    background-color: rgba(0, 0, 0, 0.1);
  }

  ::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background-color: rgba(255, 255, 255, 0.3);
  }

  /* Monaco Editor Styling */
  .monaco-editor-container {
    padding: 0 !important;
  }

  /* Adding custom fonts for editor */
  @font-face {
    font-family: 'JetBrains Mono';
    src: url('https://cdn.jsdelivr.net/gh/JetBrains/JetBrainsMono/web/woff2/JetBrainsMono-Regular.woff2') format('woff2');
    font-weight: normal;
    font-style: normal;
    font-display: swap;
  }
}

@layer utilities {
  .code-line {
    @apply px-4 py-0.5 w-full border-l-2 border-transparent;
  }
  
  .diff-added {
    @apply bg-[hsl(var(--editor-added))];
  }
  
  .diff-removed {
    @apply bg-[hsl(var(--editor-removed))];
  }
  
  .diff-highlight {
    @apply bg-[hsl(var(--editor-highlight))];
  }

  .diff-added-gutter {
    @apply border-l-2 border-green-500;
  }
  
  .diff-removed-gutter {
    @apply border-l-2 border-red-500;
  }
  
  .diff-highlight-gutter {
    @apply border-l-2 border-blue-500;
  }

  .animate-fade-in {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
}


@layer components {
  .glass {
    background: rgba( 255, 255, 255, 0.2 );
box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );
backdrop-filter: blur( 0.5px );
-webkit-backdrop-filter: blur( 0.5px );
border-radius: 10px;
border: 1px solid rgba( 255, 255, 255, 0.18 );

  }
}
</file>

<file path="src/components/CodeEditor.tsx">
import React, { useRef, useState, useEffect } from 'react';
import { Copy, Check, ChevronDown } from 'lucide-react';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import { python } from '@codemirror/lang-python';
import { html } from '@codemirror/lang-html';
import { css } from '@codemirror/lang-css';
import { json } from '@codemirror/lang-json';
import { markdown } from '@codemirror/lang-markdown';
import { createTheme } from '@uiw/codemirror-themes';
import { tags as t } from '@lezer/highlight';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface CodeEditorProps {
  title: string;
  code: string;
  language?: string;
  editable?: boolean;
  onCodeChange?: (code: string) => void;
  onCopy?: () => void;
  onLanguageChange?: (lang: 'r' | 'python' | 'sas') => void;
  onDetectedLanguageChange?: (lang: 'r' | 'python' | 'sas') => void;
  className?: string;
  sourceLanguage?: 'r' | 'python' | 'sas';
}

type SupportedLanguage = 'r' | 'python' | 'sas';

const SUPPORTED_LANGUAGES: Record<SupportedLanguage, string> = {
  r: 'R',
  python: 'Python',
  sas: 'SAS'
} as const;

const VALID_CONVERSIONS: Record<SupportedLanguage, SupportedLanguage[]> = {
  r: ['python', 'sas'],
  python: ['r', 'sas'],
  sas: ['r', 'python']
} as const;

// Language detection patterns
const LANGUAGE_PATTERNS = {
  r: [
    /<-/, // Assignment operator
    /function\s*\(/, // Function definition
    /library\(/, // Library loading
    /data\.frame\(/, // Data frame creation
    /%>%/ // Pipe operator
  ],
  python: [
    /def\s+\w+\s*\(/, // Function definition
    /import\s+\w+/, // Import statement
    /from\s+\w+\s+import/, // From import
    /print\s*\(/, // Print function
    /if\s+\w+:/, // If statement
    /for\s+\w+\s+in/ // For loop
  ],
  sas: [
    /data\s+\w+;/, // Data step
    /proc\s+\w+;/, // Proc step
    /input\s+/, // Input statement
    /set\s+\w+;/, // Set statement
    /run;/ // Run statement
  ]
} as const;

const detectLanguage = (code: string): SupportedLanguage | null => {
  const scores: Record<SupportedLanguage, number> = {
    r: 0,
    python: 0,
    sas: 0
  };

  // Check each pattern for each language
  Object.entries(LANGUAGE_PATTERNS).forEach(([lang, patterns]) => {
    patterns.forEach(pattern => {
      if (pattern.test(code)) {
        scores[lang as SupportedLanguage]++;
      }
    });
  });

  // Find the language with the highest score
  const maxScore = Math.max(...Object.values(scores));
  if (maxScore === 0) return null;

  const detectedLang = Object.entries(scores).find(([_, score]) => score === maxScore)?.[0] as SupportedLanguage;
  return detectedLang;
};

const CodeEditor: React.FC<CodeEditorProps> = ({
  title,
  code,
  language = 'javascript',
  editable = false,
  onCodeChange,
  onCopy,
  onLanguageChange,
  onDetectedLanguageChange,
  className = '',
  sourceLanguage
}) => {
  const [value, setValue] = useState(code);
  const [copied, setCopied] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const [detectedLanguage, setDetectedLanguage] = useState<SupportedLanguage | null>(null);

  useEffect(() => {
    setValue(code);
  }, [code]);

  useEffect(() => {
    if (copied) {
      const timer = setTimeout(() => setCopied(false), 2000);
      return () => clearTimeout(timer);
    }
  }, [copied]);

  // Detect language when code changes
  useEffect(() => {
    const detected = detectLanguage(value);
    if (detected && detected !== detectedLanguage) {
      setDetectedLanguage(detected);
      onDetectedLanguageChange?.(detected);
    }
  }, [value, onDetectedLanguageChange]);

  const handleCopy = () => {
    navigator.clipboard.writeText(value);
    setCopied(true);
    onCopy && onCopy();
  };

  const handleLanguageChange = (newLang: SupportedLanguage) => {
    if (sourceLanguage && VALID_CONVERSIONS[sourceLanguage].includes(newLang)) {
      onLanguageChange && onLanguageChange(newLang);
    }
  };

  const getAvailableTargetLanguages = (): SupportedLanguage[] => {
    if (!sourceLanguage) return [];
    return VALID_CONVERSIONS[sourceLanguage].filter(lang => lang !== sourceLanguage);
  };

  const extensions = {
    javascript: javascript({ jsx: true }),
    js: javascript({ jsx: true }),
    python: python(),
    py: python(),
    html: html(),
    css: css(),
    json: json(),
    markdown: markdown(),
  };

  const theme = createTheme({
    theme: 'dark',
    settings: {
      background: 'transparent',
      foreground: 'rgba(255,255,255,0.85)',
      caret: '#fff',
      selection: 'rgba(255,255,255,0.2)',
      selectionMatch: 'rgba(255,255,255,0.2)',
      lineHighlight: 'rgba(255,255,255,0.05)',
    },
    styles: [
      { tag: t.keyword, color: '#ff79c6' },
      { tag: t.operator, color: '#ff79c6' },
      { tag: t.operatorKeyword, color: '#ff79c6' },
      { tag: t.atom, color: '#bd93f9' },
      { tag: t.number, color: '#bd93f9' },
      { tag: t.string, color: '#f1fa8c' },
      { tag: t.special(t.string), color: '#f1fa8c' },
      { tag: t.comment, color: '#6272a4' },
      { tag: t.variableName, color: '#f8f8f2' },
      { tag: t.special(t.variableName), color: '#ff79c6' },
      { tag: t.definition(t.variableName), color: '#50fa7b' },
      { tag: t.function(t.variableName), color: '#50fa7b' },
      { tag: t.propertyName, color: '#8be9fd' },
      { tag: t.typeName, color: '#8be9fd' },
      { tag: t.className, color: '#8be9fd' },
      { tag: t.labelName, color: '#8be9fd' },
      { tag: t.namespace, color: '#8be9fd' },
      { tag: t.macroName, color: '#ff79c6' },
      { tag: t.modifier, color: '#ff79c6' },
      { tag: t.definition(t.variableName), color: '#ff79c6' },
      { tag: t.tagName, color: '#ff79c6' },
      { tag: t.attributeName, color: '#8be9fd' },
      { tag: t.attributeValue, color: '#f1fa8c' },
      { tag: t.bracket, color: '#f8f8f2' },
      { tag: t.meta, color: '#6272a4' },
      { tag: t.invalid, color: '#ff5555' }
    ]
  });

  return (
    <div className={`glass-editor-container ${className}`}>
      <style>{`
        .glass-editor-container {
          backdrop-filter: blur(10px);
          background-color: rgba(15, 15, 30, 0.3);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 8px;
          box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
          display: flex;
          flex-direction: column;
          height: 100%;
          overflow: hidden;
          transition: all 0.3s ease;
        }
        .glass-editor-container:hover {
          box-shadow: 0 15px 40px rgba(0, 0, 0, 0.25);
          border-color: rgba(255, 255, 255, 0.15);
          background-color: rgba(15, 15, 30, 0.35);
        }
        .glass-editor-header {
          background-color: rgba(255, 255, 255, 0.03);
          border-bottom: 1px solid rgba(255, 255, 255, 0.07);
          display: flex;
          align-items: center;
          justify-content: space-between;
          padding: 12px 16px;
          backdrop-filter: blur(12px);
          flex-shrink: 0;
        }
        .glass-editor-title {
          color: rgba(255, 255, 255, 0.85);
          font-size: 14px;
          font-weight: 500;
        }
        .glass-editor-actions {
          display: flex;
          align-items: center;
          gap: 8px;
        }
        .glass-editor-language-btn {
          display: flex;
          align-items: center;
          gap: 4px;
          background-color: rgba(255, 255, 255, 0.07);
          border: none;
          border-radius: 6px;
          color: rgba(255, 255, 255, 0.85);
          cursor: pointer;
          font-size: 13px;
          padding: 6px 10px;
          transition: all 0.2s ease;
        }
        .glass-editor-language-btn:hover {
          background-color: rgba(255, 255, 255, 0.12);
        }
        .glass-editor-copy-btn {
          display: flex;
          align-items: center;
          justify-content: center;
          background-color: rgba(255, 255, 255, 0.07);
          border: none;
          border-radius: 9999px;
          cursor: pointer;
          width: 32px;
          height: 32px;
          transition: all 0.2s ease;
        }
        .glass-editor-copy-btn:hover {
          background-color: rgba(255, 255, 255, 0.12);
          transform: translateY(-1px);
        }
        .glass-editor-copy-icon,
        .glass-editor-success-icon {
          width: 16px;
          height: 16px;
        }
        .glass-editor-success-icon {
          color: #4ade80;
        }
        .glass-editor-content {
          position: relative;
          flex: 1;
          min-height: 0;
          overflow: hidden;
        }
        .glass-editor-instance {
          height: 100%;
        }
        .glass-editor-instance .cm-editor {
          background: transparent !important;
          height: 100% !important;
        }
        .glass-editor-instance .cm-scroller {
          background-color: rgba(0, 0, 0, 0.15) !important;
          overflow: auto !important;
        }
        .glass-editor-instance .cm-gutters {
          background: rgba(0, 0, 0, 0.2) !important;
          border-right: 1px solid rgba(255, 255, 255, 0.1);
          color: rgba(255, 255, 255, 0.4);
        }
        .glass-editor-instance .cm-cursor {
          border-left: 2px solid rgba(255,255,255,0.8) !important;
        }
        .glass-editor-instance .cm-selectionBackground {
          background: rgba(255,255,255,0.2) !important;
        }
        .glass-editor-instance .cm-activeLine {
          background: rgba(255,255,255,0.05) !important;
        }
        /* Glassmorphic dropdown styles */
        [data-radix-popper-content-wrapper] {
          backdrop-filter: blur(10px) !important;
          background-color: rgba(15, 15, 30, 0.95) !important;
          border: 1px solid rgba(255, 255, 255, 0.1) !important;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2) !important;
        }
        [data-radix-popper-content-wrapper] [role="menuitem"] {
          color: rgba(255, 255, 255, 0.85) !important;
          transition: all 0.2s ease !important;
        }
        [data-radix-popper-content-wrapper] [role="menuitem"]:hover {
          background-color: rgba(255, 255, 255, 0.1) !important;
        }
      `}</style>

      <div className="glass-editor-header">
        <h3 className="glass-editor-title">
          {title}
          {detectedLanguage && (
            <span className="text-sm text-muted-foreground ml-2">
              (Detected: {SUPPORTED_LANGUAGES[detectedLanguage]})
            </span>
          )}
        </h3>
        <div className="glass-editor-actions">
          {/* <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <button className="glass-editor-language-btn">
                {SUPPORTED_LANGUAGES[language as SupportedLanguage] || language}
                <ChevronDown className="h-4 w-4" />
              </button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              {getAvailableTargetLanguages().map((lang) => (
                <DropdownMenuItem
                  key={lang}
                  onClick={() => handleLanguageChange(lang)}
                >
                  {SUPPORTED_LANGUAGES[lang]}
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu> */}
          <button onClick={handleCopy} className="glass-editor-copy-btn" title="Copy code">
            {copied ? <Check className="glass-editor-success-icon" /> : <Copy className="glass-editor-copy-icon" />}
          </button>
        </div>
      </div>

      <div className="glass-editor-content">
        <CodeMirror
          value={value}
          editable={editable}
          height="100%"
          extensions={[extensions[language] || extensions.javascript]}
          onChange={(val) => {
            setValue(val);
            onCodeChange && onCodeChange(val);
          }}
          theme={theme}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          basicSetup={{
            lineNumbers: true,
            highlightActiveLineGutter: true,
            foldGutter: true,
            dropCursor: true,
            allowMultipleSelections: true,
            indentOnInput: true,
            bracketMatching: true,
            closeBrackets: true,
            autocompletion: true,
            rectangularSelection: true,
            highlightActiveLine: true,
            highlightSelectionMatches: true,
            searchKeymap: true
          }}
          className="glass-editor-instance"
        />
      </div>
    </div>
  );
};

export default CodeEditor;
</file>

<file path="src/components/ScoreCardDisplay.tsx">
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip";
import { ScoreData } from '@/api/service';
import { Badge } from '@/components/ui/badge';
import { CircleHelp } from 'lucide-react';

interface ScoreCardDisplayProps {
  scores: ScoreData;
}

const ScoreCard = ({ 
  title, 
  score, 
  explanation, 
  color 
}: { 
  title: string; 
  score: number; 
  explanation: string;
  color: string;
}) => {
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Card className="overflow-hidden transition-all duration-300 hover:shadow-md">
            <CardHeader className="py-2 px-4 flex flex-row justify-between items-center">
              <CardTitle className="text-sm font-medium">{title}</CardTitle>
              <Badge 
                variant="secondary" 
                className="font-mono font-bold text-xs"
                style={{ backgroundColor: `rgba(${color}, 0.1)`, color: `rgb(${color})` }}
              >
                {score.toFixed(1)}/10
              </Badge>
            </CardHeader>
            <CardContent className="p-4 pt-0">
              <Progress
                value={score * 10} 
                className="h-1.5 mt-2"
                style={{ 
                  backgroundColor: `rgba(${color}, 0.2)`,
                }}
                indicatorClassName={`bg-[rgb(${color})]`}
              />
            </CardContent>
          </Card>
        </TooltipTrigger>
        <TooltipContent>
          <p className="text-xs max-w-xs">{explanation}</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

const ScoreCardDisplay = ({ scores }: ScoreCardDisplayProps) => {
  if (!scores) return null;

  const { overall, categories } = scores;

  // Color mappings (RGB values)
  const colors = {
    overall: "59, 130, 246",
    maintainability: "99, 102, 241",
    performance: "236, 72, 153",
    readability: "16, 185, 129",
    security: "245, 158, 11",
    testCoverage: "124, 58, 237"
  };

  return (
    <div className="space-y-4">
      <div className="flex flex-col items-center mb-6">
        <div className="text-sm text-muted-foreground flex items-center gap-1 mb-1">
          <span>Overall Code Quality</span>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <CircleHelp size={14} className="text-muted-foreground cursor-help" />
              </TooltipTrigger>
              <TooltipContent>
                <p className="text-xs max-w-xs">Calculated based on all category scores with weighted importance</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
        <div className="text-4xl font-bold mb-2">{overall.toFixed(1)}<span className="text-base text-muted-foreground">/10</span></div>
        <Progress 
          value={overall * 10} 
          className="h-2 w-48"
          style={{ backgroundColor: `rgba(${colors.overall}, 0.2)` }}
          indicatorClassName={`bg-[rgb(${colors.overall})]`}
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <ScoreCard 
          title="Maintainability" 
          score={categories.maintainability.score} 
          explanation={categories.maintainability.explanation}
          color={colors.maintainability}
        />
        <ScoreCard 
          title="Performance" 
          score={categories.performance.score} 
          explanation={categories.performance.explanation}
          color={colors.performance}
        />
        <ScoreCard 
          title="Readability" 
          score={categories.readability.score} 
          explanation={categories.readability.explanation}
          color={colors.readability}
        />
        <ScoreCard 
          title="Security" 
          score={categories.security.score} 
          explanation={categories.security.explanation}
          color={colors.security}
        />
        <ScoreCard 
          title="Test Coverage" 
          score={categories.testCoverage.score} 
          explanation={categories.testCoverage.explanation}
          color={colors.testCoverage}
        />
      </div>
    </div>
  );
};

export default ScoreCardDisplay;
</file>

<file path="src/components/CodeAnalysisResults.tsx">
import React, { useState } from 'react';
import { AlertTriangle, CircleArrowDown } from "lucide-react";
import { 
  Accordion, 
  AccordionContent, 
  AccordionItem, 
  AccordionTrigger 
} from "@/components/ui/accordion";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { Button } from "@/components/ui/button";
import { AnalysisResult } from '@/api/service';
import FlowchartVisualization from './FlowchartVisualization';
import ScoreCardDisplay from './ScoreCardDisplay';
import FunctionalityAnalysis from './FunctionalityAnalysis';

interface CodeAnalysisResultsProps {
  results: AnalysisResult | null;
  className?: string;
}

const CodeAnalysisResults: React.FC<CodeAnalysisResultsProps> = ({ results, className = "" }) => {
  const [openSections, setOpenSections] = useState({
    workflow: true,
    scores: true,
    issues: true,
    functionality: true
  });

  if (!results) {
    return <div className={`p-4 ${className}`}>No analysis results available</div>;
  }

  const { categories, detectedLanguage, workflow, scores, functionalityAnalysis } = results;
  
  const toggleSection = (section: keyof typeof openSections) => {
    setOpenSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };
  
  return (
    <div className={`space-y-6 ${className} animate-fade-in`}>
      
      
      {/* Workflow Visualization */}
      {workflow && (
        <Collapsible open={openSections.workflow} onOpenChange={() => toggleSection('workflow')} className="w-full">
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-sm font-medium">Code Flow Visualization</h3>
            <CollapsibleTrigger asChild>
              <Button variant="ghost" size="sm" className="p-0 h-8 w-8">
                <CircleArrowDown className={`h-5 w-5 transition-transform duration-200 ${openSections.workflow ? 'rotate-180' : ''}`} />
              </Button>
            </CollapsibleTrigger>
          </div>
          <CollapsibleContent className="transition-all duration-300">
            <FlowchartVisualization workflow={workflow} />
          </CollapsibleContent>
        </Collapsible>
      )}
      
      {/* Score Cards */}
      {scores && (
        <Collapsible open={openSections.scores} onOpenChange={() => toggleSection('scores')} className="w-full">
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-sm font-medium">Code Quality Scores</h3>
            <CollapsibleTrigger asChild>
              <Button variant="ghost" size="sm" className="p-0 h-8 w-8">
                <CircleArrowDown className={`h-5 w-5 transition-transform duration-200 ${openSections.scores ? 'rotate-180' : ''}`} />
              </Button>
            </CollapsibleTrigger>
          </div>
          <CollapsibleContent className="transition-all duration-300">
            <ScoreCardDisplay scores={scores} />
          </CollapsibleContent>
        </Collapsible>
      )}

      {/* Issue Categories */}
      <Collapsible open={openSections.issues} onOpenChange={() => toggleSection('issues')} className="w-full">
        <div className="flex justify-between items-center mb-2">
          <h3 className="text-sm font-medium">Optimization Opportunities</h3>
          <CollapsibleTrigger asChild>
            <Button variant="ghost" size="sm" className="p-0 h-8 w-8">
              <CircleArrowDown className={`h-5 w-5 transition-transform duration-200 ${openSections.issues ? 'rotate-180' : ''}`} />
            </Button>
          </CollapsibleTrigger>
        </div>
        <CollapsibleContent className="transition-all duration-300">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {categories.map((category, index) => (
              <Card 
                key={index} 
                className={`border ${category.hasIssues ? 'border-amber-700/30 bg-amber-950/10' : 'border-border'} transition-all duration-300 hover:shadow-md`}
              >
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-sm font-medium flex items-center gap-2">
                      {category.hasIssues && (
                        <AlertTriangle size={16} className="text-amber-500" />
                      )}
                      {category.name}
                    </CardTitle>
                    {category.hasIssues && (
                      <span className="text-xs px-2 py-0.5 bg-amber-500/20 text-amber-400 rounded-full">
                        {category.issues.length} {category.issues.length === 1 ? 'issue' : 'issues'}
                      </span>
                    )}
                  </div>
                  <CardDescription className="text-xs">
                    {category.hasIssues 
                      ? `${category.issues.length} optimization ${category.issues.length === 1 ? 'opportunity' : 'opportunities'} found`
                      : 'No optimization opportunities found'}
                  </CardDescription>
                </CardHeader>
                {category.hasIssues && (
                  <CardContent>
                    <Accordion type="single" collapsible className="w-full">
                      {category.issues.map((issue, issueIndex) => (
                        <AccordionItem key={issueIndex} value={`issue-${issueIndex}`}>
                          <AccordionTrigger className="text-sm">{issue.title}</AccordionTrigger>
                          <AccordionContent>
                            <div className="space-y-3 text-sm">
                              <div>
                                <div className="font-medium text-xs text-muted-foreground mb-1">CODE LOCATION</div>
                                <div className="bg-secondary/50 px-3 py-1 rounded-sm">{issue.location}</div>
                              </div>
                              <div>
                                <div className="font-medium text-xs text-muted-foreground mb-1">REASON</div>
                                <p>{issue.reason}</p>
                              </div>
                              <div>
                                <div className="font-medium text-xs text-muted-foreground mb-1">SUGGESTION</div>
                                <p className="text-primary">{issue.suggestion}</p>
                              </div>
                            </div>
                          </AccordionContent>
                        </AccordionItem>
                      ))}
                    </Accordion>
                  </CardContent>
                )}
              </Card>
            ))}
          </div>
        </CollapsibleContent>
      </Collapsible>

      {/* Functionality Analysis - Now displays content directly without accordions */}
      {functionalityAnalysis && (
        <Collapsible open={openSections.functionality} onOpenChange={() => toggleSection('functionality')} className="w-full">
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-sm font-medium">Functionality Analysis</h3>
            <CollapsibleTrigger asChild>
              <Button variant="ghost" size="sm" className="p-0 h-8 w-8">
                <CircleArrowDown className={`h-5 w-5 transition-transform duration-200 ${openSections.functionality ? 'rotate-180' : ''}`} />
              </Button>
            </CollapsibleTrigger>
          </div>
          <CollapsibleContent className="transition-all duration-300">
            <FunctionalityAnalysis content={functionalityAnalysis} />
          </CollapsibleContent>
        </Collapsible>
      )}
    </div>
  );
};

export default CodeAnalysisResults;
</file>

<file path="src/components/FunctionalityAnalysis.tsx">
import React from 'react';
import { Card, CardContent } from "@/components/ui/card";

interface FunctionalityAnalysisProps {
  content: string;
}

const FunctionalityAnalysis: React.FC<FunctionalityAnalysisProps> = ({ content }) => {
  // Split the content by markdown headers to create sections
  const sections = content
    .split(/(?=^#+\s+.*$)/m)
    .filter(section => section.trim() !== '');
  
  // Function to extract the header title from a section
  const getHeaderTitle = (section: string): string => {
    const headerMatch = section.match(/^#+\s+(.*?)$/m);
    return headerMatch ? headerMatch[1] : 'Overview';
  };
  
  // Function to format the content with basic markdown-like styling
  const formatContent = (text: string): React.ReactNode => {
    // Remove the header from the beginning of the section
    const content = text.replace(/^#+\s+.*?$/m, '').trim();
    
    // Split by paragraphs and format each
    return content.split(/\n{2,}/g).map((paragraph, idx) => {
      // Format code blocks
      if (paragraph.match(/^```[\s\S]*?```$/m)) {
        const code = paragraph.replace(/^```(\w+)?\n([\s\S]*?)```$/m, '$2');
        return (
          <pre key={idx} className="bg-secondary/20 p-4 rounded-md my-4 overflow-x-auto">
            <code className="text-sm text-primary">{code}</code>
          </pre>
        );
      }
      
      // Format bullet points
      if (paragraph.match(/^\s*[-*]\s+/m)) {
        const items = paragraph
          .split(/\n/)
          .filter(line => line.trim() !== '')
          .map(line => line.replace(/^\s*[-*]\s+/, ''));
        
        return (
          <ul key={idx} className="list-disc pl-5 my-3 space-y-1">
            {items.map((item, i) => (
              <li key={i} className="text-sm">{item}</li>
            ))}
          </ul>
        );
      }
      
      // Format numbered lists
      if (paragraph.match(/^\s*\d+\.\s+/m)) {
        const items = paragraph
          .split(/\n/)
          .filter(line => line.trim() !== '')
          .map(line => line.replace(/^\s*\d+\.\s+/, ''));
        
        return (
          <ol key={idx} className="list-decimal pl-5 my-3 space-y-1">
            {items.map((item, i) => (
              <li key={i} className="text-sm">{item}</li>
            ))}
          </ol>
        );
      }
      
      // Format bold text
      let formatted = paragraph.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      
      // Format italic text
      formatted = formatted.replace(/\*(.*?)\*/g, '<em>$1</em>');
      
      // Format inline code
      formatted = formatted.replace(/`(.*?)`/g, '<code>$1</code>');
      
      // Secondary headers
      if (formatted.match(/^#+\s+/)) {
        const level = (formatted.match(/^(#+)/) || ['#'])[0].length;
        const text = formatted.replace(/^#+\s+/, '');
        return (
          <div key={idx} 
            className={`font-semibold my-3 ${
              level === 2 ? 'text-lg' : 
              level === 3 ? 'text-base' : 
              'text-sm'
            }`}>
            {text}
          </div>
        );
      }
      
      return (
        <p key={idx} 
           className="my-3 text-sm leading-relaxed" 
           dangerouslySetInnerHTML={{ __html: formatted }} />
      );
    });
  };

  return (
    <Card className="border border-border">
      <CardContent className="p-6">
        <div className="space-y-6">
          {sections.map((section, index) => {
            const title = getHeaderTitle(section);
            return (
              <div key={index} className="pb-4">
                <h3 className="text-base font-semibold border-b border-border pb-2 mb-3">{title}</h3>
                <div className="prose prose-sm max-w-none dark:prose-invert prose-headings:mb-2 prose-p:my-2">
                  {formatContent(section)}
                </div>
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
};

export default FunctionalityAnalysis;
</file>

<file path="src/components/FlowchartVisualization.tsx">
import React, { useEffect, useRef } from 'react';
import * as go from 'gojs';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Download, Expand } from 'lucide-react';
import { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip";

// Define the WorkflowData interface based on the API response
export interface WorkflowData {
  nodes?: WorkflowNode[];
  edges?: WorkflowEdge[];
  optimizableSteps?: string[] | OptimizableStep[];
  // Backend response format properties
  steps?: {
    id: string;
    label: string;
  }[];
  dependencies?: {
    from: string;
    to: string;
  }[];
  optimizable_steps?: {
    id: string;
    reason: string;
  }[];
}

export interface WorkflowNode {
  id: string;
  label: string;
  type?: string;
}

export interface WorkflowEdge {
  id: string;
  source: string;
  target: string;
  label?: string;
}

export interface OptimizableStep {
  id: string;
  reason: string;
}

// Interface for the sample data structure from the backend
interface FlowchartData {
  dependencies: {
    from: string;
    to: string;
  }[];
  steps: {
    id: string;
    label: string;
  }[];
  optimizable_steps: {
    id: string;
    reason: string;
  }[];
}

interface FlowchartVisualizationProps {
  workflow: WorkflowData;
}

const FlowchartVisualization: React.FC<FlowchartVisualizationProps> = ({ workflow }) => {
  const diagramRef = useRef<HTMLDivElement>(null);
  const diagramInstance = useRef<go.Diagram | null>(null);

  // Convert the API data to a standardized format for GoJS
  const convertWorkflowToGoJSModel = (workflow: WorkflowData) => {
    // Check if we have a standard workflow or need to adapt from the backend format
    let nodeArray: go.ObjectData[] = [];
    let linkArray: go.ObjectData[] = [];
    
    // Convert nodes array to GoJS node data
    if (Array.isArray(workflow.nodes)) {
      nodeArray = workflow.nodes.map(node => ({
        key: node.id,
        text: node.label,
        type: node.type || 'default',
        isOptimizable: false,
        optimizationReason: ''
      }));
    } else if (workflow.hasOwnProperty('steps')) {
      // Handle the backend format
      const backendData = workflow as unknown as { 
        steps: FlowchartData['steps'], 
        dependencies: FlowchartData['dependencies'], 
        optimizable_steps: FlowchartData['optimizable_steps'] 
      };
      
      nodeArray = backendData.steps.map(step => ({
        key: step.id,
        text: step.label,
        type: 'default',
        isOptimizable: false,
        optimizationReason: ''
      }));
    }
    
    // Mark optimizable nodes
    if (Array.isArray(workflow.optimizableSteps)) {
      // Handle different optimizable steps formats
      if (typeof workflow.optimizableSteps[0] === 'string') {
        // Simple string array format
        const optimizableIds = workflow.optimizableSteps as string[];
        nodeArray.forEach(node => {
          if (optimizableIds.includes(node.key as string)) {
            node.isOptimizable = true;
            node.optimizationReason = "This step can be optimized";
          }
        });
      } else {
        // Detailed object format with reasons
        const optimizableSteps = workflow.optimizableSteps as OptimizableStep[];
        nodeArray.forEach(node => {
          const optimizableStep = optimizableSteps.find(step => step.id === node.key);
          if (optimizableStep) {
            node.isOptimizable = true;
            node.optimizationReason = optimizableStep.reason;
          }
        });
      }
    } else if (workflow.hasOwnProperty('optimizable_steps')) {
      // Handle the backend format
      const backendData = workflow as unknown as { optimizable_steps: FlowchartData['optimizable_steps'] };
      nodeArray.forEach(node => {
        const optimizableStep = backendData.optimizable_steps.find(step => step.id === node.key);
        if (optimizableStep) {
          node.isOptimizable = true;
          node.optimizationReason = optimizableStep.reason;
        }
      });
    }
    
    // Convert edges to GoJS link data
    if (Array.isArray(workflow.edges)) {
      linkArray = workflow.edges.map(edge => ({
        from: edge.source,
        to: edge.target,
        text: edge.label || ''
      }));
    } else if (workflow.hasOwnProperty('dependencies')) {
      // Handle the backend format
      const backendData = workflow as unknown as { dependencies: FlowchartData['dependencies'] };
      linkArray = backendData.dependencies.map(dep => ({
        from: dep.from,
        to: dep.to,
        text: ''
      }));
    }
    
    return { nodeArray, linkArray };
  };

  // Initialize and render the diagram
  useEffect(() => {
    if (!workflow || !diagramRef.current) return;

    // Create a new diagram
    const $ = go.GraphObject.make;
    const diagram = new go.Diagram(diagramRef.current, {
      "undoManager.isEnabled": true,
      layout: $(go.LayeredDigraphLayout, {
        direction: 90,
        layerSpacing: 40,
        columnSpacing: 30,
        setsPortSpots: false
      }),
      "animationManager.isEnabled": true,
      "animationManager.initialAnimationStyle": go.AnimationManager.None,
      model: new go.GraphLinksModel({
        linkKeyProperty: 'id'
      })
    });

    // Define node template
    diagram.nodeTemplate = $(go.Node, "Auto",
      {
        selectionAdorned: false,
        resizable: false,
        layoutConditions: go.Part.LayoutStandard & ~go.Part.LayoutNodeSized,
        // Apply a shadow effect with JavaScript DOM API instead of GoJS Shadow
        shadowVisible: true,
        shadowOffset: new go.Point(2, 2),
        shadowBlur: 7,
        shadowColor: "rgba(0, 0, 0, 0.2)",
        // Add tooltip
        toolTip: $(go.Adornment, "Auto",
          $(go.Shape, { fill: "#2A2F42", stroke: "#676B79" }),
          $(go.TextBlock, 
            { 
              margin: 8, 
              font: "11px 'Inter', sans-serif",
              stroke: "white",
              wrap: go.TextBlock.WrapFit,
              alignment: go.Spot.Center
            },
            new go.Binding("text", "", data => {
              return data.isOptimizable ? 
                `Optimization: ${data.optimizationReason}` : 
                data.text;
            })
          )
        )
      },
      new go.Binding("opacity", "isOptimizable", opt => opt ? 1 : 0.9),
      // Node shape
      $(go.Shape, "RoundedRectangle", 
        { 
          fill: "rgba(43, 47, 66, 0.8)", 
          stroke: "#484F6F",
          strokeWidth: 1.5,
          spot1: go.Spot.TopLeft, 
          spot2: go.Spot.BottomRight,
          parameter1: 8
        },
        // Conditional styling for optimizable nodes
        new go.Binding("fill", "isOptimizable", opt => opt ? "rgba(234, 56, 76, 0.15)" : "rgba(43, 47, 66, 0.8)"),
        new go.Binding("stroke", "isOptimizable", opt => opt ? "#ea384c" : "#484F6F"),
        new go.Binding("strokeWidth", "isOptimizable", opt => opt ? 2 : 1.5)
      ),
      // Node content
      $(go.Panel, "Vertical",
        {
          margin: 12,
          alignment: go.Spot.Center
        },
        // Type badge
        $(go.Panel, "Auto",
          { visible: false },
          new go.Binding("visible", "type", t => t !== "default"),
          $(go.Shape, "RoundedRectangle", 
            { 
              fill: "#9b87f5", 
              stroke: null,
              height: 20,
              width: 80,
              alignment: go.Spot.Center
            }
          ),
          $(go.TextBlock, 
            {
              alignment: go.Spot.Center,
              stroke: "white",
              font: "10px 'Inter', sans-serif"
            },
            new go.Binding("text", "type")
          )
        ),
        // Main label
        $(go.TextBlock, 
          {
            margin: new go.Margin(5, 0, 0, 0),
            alignment: go.Spot.Center,
            stroke: "white",
            font: "13px 'Inter', sans-serif",
            maxSize: new go.Size(150, NaN),
            wrap: go.TextBlock.WrapFit,
            textAlign: "center"
          },
          new go.Binding("text")
        )
      )
    );

    // Define link template
    diagram.linkTemplate = $(go.Link,
      {
        curve: go.Link.Bezier,
        reshapable: false,
        relinkableFrom: false,
        relinkableTo: false,
        toEndSegmentLength: 30,
        fromEndSegmentLength: 30
      },
      // Link path
      $(go.Shape, 
        { 
          strokeWidth: 2, 
          stroke: "#8E9196" 
        },
        new go.Binding("stroke", "", function(link) {
          // Check if either the source or target node is optimizable
          const diagram = link.part.diagram;
          if (!diagram) return "#8E9196";
          
          const sourceNode = link.fromNode;
          const targetNode = link.toNode;
          
          if (!sourceNode || !targetNode) return "#8E9196";
          
          if (sourceNode.data.isOptimizable || targetNode.data.isOptimizable) {
            return "#ea384c";
          }
          
          return "#8E9196";
        }).ofObject()
      ),
      // Arrowhead
      $(go.Shape, 
        { 
          toArrow: "Triangle", 
          stroke: "#8E9196", 
          fill: "#8E9196",
          scale: 1.2
        },
        new go.Binding("stroke", "", function(link) {
          // Match the arrow color to the path color
          const diagram = link.part.diagram;
          if (!diagram) return "#8E9196";
          
          const sourceNode = link.fromNode;
          const targetNode = link.toNode;
          
          if (!sourceNode || !targetNode) return "#8E9196";
          
          if (sourceNode.data.isOptimizable || targetNode.data.isOptimizable) {
            return "#ea384c";
          }
          
          return "#8E9196";
        }).ofObject(),
        new go.Binding("fill", "", function(link) {
          // Match the arrow fill to the path color
          const diagram = link.part.diagram;
          if (!diagram) return "#8E9196";
          
          const sourceNode = link.fromNode;
          const targetNode = link.toNode;
          
          if (!sourceNode || !targetNode) return "#8E9196";
          
          if (sourceNode.data.isOptimizable || targetNode.data.isOptimizable) {
            return "#ea384c";
          }
          
          return "#8E9196";
        }).ofObject()
      ),
      // Link label
      $(go.TextBlock, 
        { 
          segmentOffset: new go.Point(0, -10),
          font: "10px 'Inter', sans-serif",
          stroke: "white",
          background: "rgba(30, 34, 47, 0.7)",
          // Replace padding with margin which is supported by GoJS TextBlock
          margin: 2
        },
        new go.Binding("text", "text")
      )
    );

    // Set model data
    const { nodeArray, linkArray } = convertWorkflowToGoJSModel(workflow);
    diagram.model = new go.GraphLinksModel({
      nodeDataArray: nodeArray,
      linkDataArray: linkArray
    });

    // Save the diagram instance for later use
    diagramInstance.current = diagram;

    // Initial layout and fit to view
    diagram.layoutDiagram(true);
    diagram.contentAlignment = go.Spot.Center;
    diagram.commandHandler.zoomToFit();
    diagram.contentAlignment = go.Spot.Center;

    // Clean up on unmount
    return () => {
      diagram.div = null;
    };
  }, [workflow]);

  // Handle diagram download
  const handleDownload = () => {
    if (!diagramInstance.current) return;
    
    const diagram = diagramInstance.current;
    
    // Create a canvas from the diagram
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Set canvas size to diagram bounds
    const bounds = diagram.documentBounds;
    const scale = 2; // Higher quality
    canvas.width = bounds.width * scale;
    canvas.height = bounds.height * scale;
    
    // Draw diagram to canvas with better quality
    const svgOptions: go.SvgRendererOptions = {
      document: document,
      scale: scale,
      background: diagram.div ? diagram.div.style.backgroundColor : "rgba(0,0,0,0)",
    };
    
    // Fixed: TypeScript error with SVGElement by using proper type handling
    try {
      const svg = diagram.makeSvg(svgOptions);
      
      // Convert SVG to a data URL
      const serializer = new XMLSerializer();
      const svgStr = serializer.serializeToString(svg);
      const svgBlob = new Blob([svgStr], {type: "image/svg+xml;charset=utf-8"});
      const url = URL.createObjectURL(svgBlob);
      
      // Create image from SVG
      const img = new Image();
      img.onload = function() {
        // Draw the image on the canvas
        if (ctx) {
          ctx.fillStyle = "white";
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          ctx.drawImage(img, 0, 0);
          
          // Convert to PNG and download
          const imgURI = canvas.toDataURL("image/png");
          const a = document.createElement("a");
          a.download = "flowchart.png";
          a.href = imgURI;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          
          // Clean up
          URL.revokeObjectURL(url);
        }
      };
      img.src = url;
    } catch (error) {
      console.error("Failed to generate SVG:", error);
    }
  };

  // Handle fullscreen mode
  const handleFullscreen = () => {
    if (!diagramRef.current) return;
    
    if (document.fullscreenElement) {
      document.exitFullscreen();
    } else {
      diagramRef.current.requestFullscreen();
    }
  };

  if (!workflow) return null;
  
  return (
    <Card className="mb-6 overflow-hidden border border-border bg-card/50">
      <CardContent className="p-0">
        <div className="relative">
          {/* Controls overlay */}
          <div className="absolute top-2 right-2 z-10 flex gap-2">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="secondary" size="sm" onClick={handleDownload} className="h-8 px-2">
                    <Download size={16} className="mr-1" />
                    <span className="text-xs">Export</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="bottom">
                  <p className="text-xs">Download as PNG</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
            
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="secondary" size="sm" onClick={handleFullscreen} className="h-8 px-2">
                    <Expand size={16} className="mr-1" />
                    <span className="text-xs">Fullscreen</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="bottom">
                  <p className="text-xs">View in fullscreen</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
          
          {/* GoJS diagram container */}
          <div 
            ref={diagramRef} 
            style={{ 
              height: 400, 
              width: '100%',
              backgroundColor: 'transparent'
            }} 
            className="gojs-diagram"
          />
        </div>
      </CardContent>
    </Card>
  );
};

export default FlowchartVisualization;
</file>

<file path="package.json">
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@codemirror/lang-css": "^6.3.1",
    "@codemirror/lang-html": "^6.4.9",
    "@codemirror/lang-javascript": "^6.2.4",
    "@codemirror/lang-json": "^6.0.1",
    "@codemirror/lang-markdown": "^6.3.2",
    "@codemirror/lang-python": "^6.2.1",
    "@codemirror/language": "^6.11.0",
    "@codemirror/state": "^6.5.2",
    "@codemirror/theme-one-dark": "^6.1.2",
    "@codemirror/view": "^6.36.8",
    "@hookform/resolvers": "^3.9.0",
    "@lezer/highlight": "^1.2.1",
    "@monaco-editor/react": "^4.7.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@tabler/icons-react": "^3.33.0",
    "@tanstack/react-query": "^5.56.2",
    "@uiw/codemirror-theme-github": "^4.23.12",
    "@uiw/codemirror-themes": "^4.23.12",
    "@uiw/react-codemirror": "^4.23.12",
    "axios": "^1.9.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "codemirror": "^6.0.1",
    "colord": "^2.9.3",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "gojs": "^2.3.11",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "motion": "^12.12.1",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-codemirror2": "^8.0.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "reactflow": "^11.11.4",
    "recharts": "^2.12.7",
    "sonner": "^2.0.3",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "prettier": "^3.5.3",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}
</file>

<file path="src/components/CodeOptimizer.tsx">
import React, { useState, useEffect } from 'react';
import { toast } from "@/components/ui/sonner";
import CodeInput from './CodeInput';
import ViewTabs from './ViewTabs';
import ResultsPanel from './ResultsPanel';
import EmptyState from './EmptyState';
import OptimizationResultTabs from './OptimizationResultTabs';
import AnalysisResultTabs from './AnalysisResultTabs';
import LanguageSelectionModal from './convert/LanguageSelectionModal';
import LanguageWarningBanner from './convert/LanguageWarningBanner';
import {
  analyzeCode,
  optimizeCode,
  documentCode,
  convertCode,
  AnalysisResult,
  OptimizationResult,
} from '@/api/service';

const CodeOptimizer: React.FC = () => {
  const [code, setCode] = useState("");

  // Analysis & Optimization States
  const [optimizedCode, setOptimizedCode] = useState('');
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult | null>(null);
  const [optimizationResults, setOptimizationResults] = useState<OptimizationResult | null>(null);
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  // Conversion & Documentation States
  const [selectedLanguage, setSelectedLanguage] = useState<'r' | 'python' | 'sas'>('r');
  const [detectedLanguage, setDetectedLanguage] = useState<'r' | 'python' | 'sas'>('python');
  const [convertResult, setConvertResult] = useState<{
    original_code: string;
    converted_code: string;
    source_language: string;
    target_language: string;
    conversion_notes: string;
  } | null>(null);
  const [documentResult, setDocumentResult] = useState<{ original_code: string; documented_code: string } | null>(null);
  const [isConverting, setIsConverting] = useState(false);
  const [isDocumenting, setIsDocumenting] = useState(false);

  // View State
  const [activeView, setActiveView] = useState<
    | 'analysis'
    | 'optimization'
    | 'convert'
    | 'document'
    | null
  >(null);

  // Source language state - default to python since the default code is JavaScript/Python-like
  const [sourceLanguage, setSourceLanguage] = useState<'r' | 'python' | 'sas'>('python');

  // Modal and language validation states
  const [showConvertModal, setShowConvertModal] = useState(false);
  const [selectedTargetLanguage, setSelectedTargetLanguage] = useState<'python' | 'r' | 'sas' | null>(null);
  const [showLanguageWarning, setShowLanguageWarning] = useState(false);
  const [detectedInvalidLanguage, setDetectedInvalidLanguage] = useState<string>('');

  // Function to validate if language is supported for conversion
  const isSupportedLanguage = (language: string): language is 'python' | 'r' | 'sas' => {
    return ['python', 'r', 'sas'].includes(language.toLowerCase());
  };

  // NEW: Handle detected language changes from CodeEditor
  const handleDetectedLanguageChange = (detectedLang: 'r' | 'python' | 'sas') => {
    console.log('Language detected in CodeOptimizer:', detectedLang);
    setSourceLanguage(detectedLang);
    setDetectedLanguage(detectedLang);
    
    // Hide warning if the detected language is supported
    if (isSupportedLanguage(detectedLang)) {
      setShowLanguageWarning(false);
    }
  };

  // Handlers
  const handleOptimize = async () => {
    setIsOptimizing(true);
    try {
      const results = await optimizeCode(code);
      console.log('Optimization results:', results);
      setOptimizedCode(results.optimizedCode);
      setOptimizationResults(results);
      setActiveView('optimization');
      toast.success('Code optimized successfully!');
    } catch (error) {
      console.error('Optimization error:', error);
      toast.error('Failed to optimize code. Please try again.');
    } finally {
      setIsOptimizing(false);
    }
  };

  const handleAnalyze = async () => {
    setIsAnalyzing(true);
    try {
      const results = await analyzeCode(code);
      console.log('Analysis results:', results);
      setAnalysisResults(results);
      setActiveView('analysis');
      toast.success('Code analysis completed!');
    } catch (error) {
      console.error('Analysis error:', error);
      toast.error('Failed to analyze code. Please try again.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Handle convert - opens modal instead of direct conversion
  const handleConvertClick = () => {
    console.log('Convert clicked with sourceLanguage:', sourceLanguage);
    
    // Check if source language is supported
    if (!isSupportedLanguage(sourceLanguage)) {
      setDetectedInvalidLanguage(sourceLanguage);
      setShowLanguageWarning(true);
      toast.error('Conversion only supports Python, R, and SAS as input languages.');
      return;
    }

    // Open language selection modal
    setSelectedTargetLanguage(null);
    setShowConvertModal(true);
  };

  // Handle actual conversion after language selection
  const handleConvertToLanguage = async (targetLanguage: 'python' | 'r' | 'sas') => {
    setIsConverting(true);
    try {
      const result = await convertCode(code, sourceLanguage, targetLanguage);
      console.log('Conversion results:', result);
      setConvertResult(result);
      setActiveView('convert');
      setShowConvertModal(false);
      setSelectedTargetLanguage(null);
      toast.success(`Code converted to ${targetLanguage.toUpperCase()} successfully!`);
    } catch (error) {
      console.error('Conversion error:', error);
      toast.error('Failed to convert code. Please try again.');
    } finally {
      setIsConverting(false);
    }
  };

  // Handle modal close
  const handleCloseConvertModal = () => {
    if (!isConverting) {
      setShowConvertModal(false);
      setSelectedTargetLanguage(null);
    }
  };

  // Handle target language selection in modal
  const handleTargetLanguageSelect = (language: 'python' | 'r' | 'sas') => {
    setSelectedTargetLanguage(language);
  };

  const handleDocument = async () => {
    setIsDocumenting(true);
    try {
      const result = await documentCode(code);
      console.log('Documentation results:', result);
      setDocumentResult(result);
      setActiveView('document');
      toast.success('Documentation generated successfully!');
    } catch (error) {
      console.error('Documentation error:', error);
      toast.error('Failed to generate documentation. Please try again.');
    } finally {
      setIsDocumenting(false);
    }
  };

  // Language change handler with validation
  const handleSourceLanguageChange = (lang: 'r' | 'python' | 'sas') => {
    console.log('Manual language change to:', lang);
    setSourceLanguage(lang);
    
    // Hide warning if user selects a supported language
    if (isSupportedLanguage(lang)) {
      setShowLanguageWarning(false);
    }
  };

  const handleResetResults = () => {
    // Only reset if we're not in the middle of an operation
    if (!isAnalyzing && !isOptimizing && !isConverting && !isDocumenting) {
      // Don't reset the active view if we have results
      if (!analysisResults && !optimizationResults && !convertResult && !documentResult) {
        setActiveView(null);
      }
      setAnalysisResults(null);
      setOptimizationResults(null);
      setConvertResult(null);
      setDocumentResult(null);
    }
  };

  // Debug logging for state changes
  useEffect(() => {
    console.log('CodeOptimizer state:', {
      sourceLanguage,
      detectedLanguage,
      showConvertModal,
      selectedTargetLanguage
    });
  }, [sourceLanguage, detectedLanguage, showConvertModal, selectedTargetLanguage]);

  // Update the useEffect to be more explicit about view transitions
  useEffect(() => {
    console.log('Current state:', {
      activeView,
      hasAnalysisResults: !!analysisResults,
      hasOptimizationResults: !!optimizationResults,
      hasConvertResult: !!convertResult,
      hasDocumentResult: !!documentResult
    });

    // If we have results but no active view, set the appropriate view
    if (analysisResults && !activeView) {
      console.log('Setting view to analysis');
      setActiveView('analysis');
    } else if (optimizationResults && !activeView) {
      console.log('Setting view to optimization');
      setActiveView('optimization');
    } else if (convertResult && !activeView) {
      console.log('Setting view to convert');
      setActiveView('convert');
    } else if (documentResult && !activeView) {
      console.log('Setting view to document');
      setActiveView('document');
    }
  }, [analysisResults, optimizationResults, convertResult, documentResult, activeView]);

  // Add a new useEffect to maintain view state when results exist
  useEffect(() => {
    if (activeView === 'analysis' && !analysisResults) {
      setActiveView(null);
    } else if (activeView === 'optimization' && !optimizationResults) {
      setActiveView(null);
    } else if (activeView === 'convert' && !convertResult) {
      setActiveView(null);
    } else if (activeView === 'document' && !documentResult) {
      setActiveView(null);
    }
  }, [activeView, analysisResults, optimizationResults, convertResult, documentResult]);

  // Add a debug effect to monitor state changes
  useEffect(() => {
    console.log('View state changed:', activeView);
  }, [activeView]);

  // Check if we should show empty state
  const showEmptyState = !activeView;

  return (
    <>
      {/* Language Warning Banner */}
      {showLanguageWarning && (
        <div className="fixed top-4 left-4 right-4 z-40">
          <LanguageWarningBanner
            isVisible={showLanguageWarning}
            onDismiss={() => setShowLanguageWarning(false)}
            detectedLanguage={detectedInvalidLanguage}
          />
        </div>
      )}

      {/* Language Selection Modal */}
      <LanguageSelectionModal
        isOpen={showConvertModal}
        onClose={handleCloseConvertModal}
        onConvert={handleConvertToLanguage}
        sourceLanguage={sourceLanguage}
        isConverting={isConverting}
        selectedLanguage={selectedTargetLanguage}
        onLanguageSelect={handleTargetLanguageSelect}
      />

      {/* EMPTY STATE */}
      {showEmptyState && (
        <EmptyState
          code={code}
          onCodeChange={setCode}
          onAnalyze={handleAnalyze}
          onOptimize={handleOptimize}
          onConvert={handleConvertClick}
          onDocument={handleDocument}
          isAnalyzing={isAnalyzing}
          isOptimizing={isOptimizing}
          isConverting={isConverting}
          isDocumenting={isDocumenting}
          analysisResults={analysisResults}
          optimizationResults={optimizationResults}
          convertResult={convertResult}
          documentResult={documentResult}
          selectedLanguage={selectedLanguage}
          onLanguageChange={setSelectedLanguage}
          activeView={activeView}
          setActiveView={setActiveView}
          sourceLanguage={sourceLanguage}
          onSourceLanguageChange={handleSourceLanguageChange}
          onDetectedLanguageChange={handleDetectedLanguageChange}
          onResetResults={handleResetResults}
        />
      )}

      {/* RESULTS VIEWS */}
      {!showEmptyState && (
        <>
          {/* Full-screen wrapper: top tabs + content */}
          <div className="flex flex-col h-screen overflow-hidden">
            {/* Top Tabs Bar */}
            <ViewTabs
              activeView={activeView}
              setActiveView={setActiveView}
              analysisResults={analysisResults}
              optimizationResults={optimizationResults}
              convertResult={convertResult}
              documentResult={documentResult}
            />

            {/* Main Content Area */}
            <div className="flex flex-col lg:flex-row flex-1 overflow-hidden">
              {/* Left Pane / Top Pane on Mobile */}
              <div className="w-full lg:w-1/2 h-1/2 lg:h-full overflow-hidden border-b lg:border-b-0 lg:border-r border-gray-800 p-2 sm:p-4">
                <CodeInput
                  code={code}
                  onCodeChange={setCode}
                  onAnalyze={handleAnalyze}
                  onOptimize={handleOptimize}
                  onConvert={handleConvertClick}
                  onDocument={handleDocument}
                  isAnalyzing={isAnalyzing}
                  isOptimizing={isOptimizing}
                  isConverting={isConverting}
                  isDocumenting={isDocumenting}
                  analysisResults={analysisResults}
                  optimizationResults={optimizationResults}
                  convertResult={convertResult}
                  documentResult={documentResult}
                  selectedLanguage={selectedLanguage}
                  onLanguageChange={setSelectedLanguage}
                  activeView={activeView}
                  setActiveView={setActiveView}
                  sourceLanguage={sourceLanguage}
                  onSourceLanguageChange={handleSourceLanguageChange}
                  onDetectedLanguageChange={handleDetectedLanguageChange}
                  onResetResults={handleResetResults}
                />
              </div>

              {/* Right Pane / Bottom Pane on Mobile */}
              <ResultsPanel
                activeView={activeView}
                analysisResults={analysisResults}
                optimizationResults={optimizationResults}
                convertResult={convertResult}
                documentResult={documentResult}
                selectedLanguage={selectedLanguage}
                setSelectedLanguage={setSelectedLanguage}
                sourceLanguage={sourceLanguage}
              />
            </div>
          </div>

          {/* Bottom Result Tabs Section */}
          <div className="pt-4 sm:pt-8">
            {(activeView === 'optimization' || activeView === 'analysis') && (
              <div className="border-t border-gray-800">
                <div className="p-3 sm:p-0">
                  {activeView === 'optimization' && optimizationResults && (
                    <OptimizationResultTabs results={optimizationResults} />
                  )}
                  {activeView === 'analysis' && analysisResults && (
                    <AnalysisResultTabs results={analysisResults} />
                  )}
                </div>
              </div>
            )}
          </div>
        </>
      )}
    </>
  );
};

export default CodeOptimizer;
</file>

</files>
